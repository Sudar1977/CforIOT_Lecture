
Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bb0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08001cbc  08001cbc  00011cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d50  08001d50  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001d50  08001d50  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d50  08001d50  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d50  08001d50  00011d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d54  08001d54  00011d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  08001dc8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08001dc8  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049e3  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012d2  00000000  00000000  00024a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000498  00000000  00000000  00025d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f0  00000000  00000000  000261e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170b4  00000000  00000000  000265d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000058a2  00000000  00000000  0003d68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081250  00000000  00000000  00042f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c417e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000168c  00000000  00000000  000c41d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ca4 	.word	0x08001ca4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001ca4 	.word	0x08001ca4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f9ac 	bl	80004ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f812 	bl	800017c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f84c 	bl	80001f4 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5); //Toggle the GPIO pin state
 800015c:	2120      	movs	r1, #32
 800015e:	4805      	ldr	r0, [pc, #20]	; (8000174 <main+0x28>)
 8000160:	f000 fcaa 	bl	8000ab8 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000); //Delay for 1000 milliseconds
 8000164:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000168:	f000 fa02 	bl	8000570 <HAL_Delay>
	  printf("Hellow world!\n");
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <main+0x2c>)
 800016e:	f001 f945 	bl	80013fc <puts>
  {
 8000172:	e7f3      	b.n	800015c <main+0x10>
 8000174:	40010800 	.word	0x40010800
 8000178:	08001cbc 	.word	0x08001cbc

0800017c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b090      	sub	sp, #64	; 0x40
 8000180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000182:	f107 0318 	add.w	r3, r7, #24
 8000186:	2228      	movs	r2, #40	; 0x28
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f001 f8c0 	bl	8001310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]
 800019c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800019e:	2302      	movs	r3, #2
 80001a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a2:	2301      	movs	r3, #1
 80001a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a6:	2310      	movs	r3, #16
 80001a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001aa:	2300      	movs	r3, #0
 80001ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ae:	f107 0318 	add.w	r3, r7, #24
 80001b2:	4618      	mov	r0, r3
 80001b4:	f000 fc9a 	bl	8000aec <HAL_RCC_OscConfig>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d001      	beq.n	80001c2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001be:	f000 f84b 	bl	8000258 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c2:	230f      	movs	r3, #15
 80001c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001c6:	2300      	movs	r3, #0
 80001c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ca:	2300      	movs	r3, #0
 80001cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d2:	2300      	movs	r3, #0
 80001d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f000 ff06 	bl	8000fec <HAL_RCC_ClockConfig>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d001      	beq.n	80001ea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001e6:	f000 f837 	bl	8000258 <Error_Handler>
  }
}
 80001ea:	bf00      	nop
 80001ec:	3740      	adds	r7, #64	; 0x40
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
	...

080001f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001fa:	f107 0308 	add.w	r3, r7, #8
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000208:	4b11      	ldr	r3, [pc, #68]	; (8000250 <MX_GPIO_Init+0x5c>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a10      	ldr	r2, [pc, #64]	; (8000250 <MX_GPIO_Init+0x5c>)
 800020e:	f043 0304 	orr.w	r3, r3, #4
 8000212:	6193      	str	r3, [r2, #24]
 8000214:	4b0e      	ldr	r3, [pc, #56]	; (8000250 <MX_GPIO_Init+0x5c>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	f003 0304 	and.w	r3, r3, #4
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000220:	2200      	movs	r2, #0
 8000222:	2120      	movs	r1, #32
 8000224:	480b      	ldr	r0, [pc, #44]	; (8000254 <MX_GPIO_Init+0x60>)
 8000226:	f000 fc2f 	bl	8000a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800022a:	2320      	movs	r3, #32
 800022c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800022e:	2301      	movs	r3, #1
 8000230:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000232:	2300      	movs	r3, #0
 8000234:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000236:	2302      	movs	r3, #2
 8000238:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800023a:	f107 0308 	add.w	r3, r7, #8
 800023e:	4619      	mov	r1, r3
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <MX_GPIO_Init+0x60>)
 8000242:	f000 fa9d 	bl	8000780 <HAL_GPIO_Init>

}
 8000246:	bf00      	nop
 8000248:	3718      	adds	r7, #24
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40021000 	.word	0x40021000
 8000254:	40010800 	.word	0x40010800

08000258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800025c:	b672      	cpsid	i
}
 800025e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000260:	e7fe      	b.n	8000260 <Error_Handler+0x8>
	...

08000264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800026a:	4b15      	ldr	r3, [pc, #84]	; (80002c0 <HAL_MspInit+0x5c>)
 800026c:	699b      	ldr	r3, [r3, #24]
 800026e:	4a14      	ldr	r2, [pc, #80]	; (80002c0 <HAL_MspInit+0x5c>)
 8000270:	f043 0301 	orr.w	r3, r3, #1
 8000274:	6193      	str	r3, [r2, #24]
 8000276:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <HAL_MspInit+0x5c>)
 8000278:	699b      	ldr	r3, [r3, #24]
 800027a:	f003 0301 	and.w	r3, r3, #1
 800027e:	60bb      	str	r3, [r7, #8]
 8000280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000282:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <HAL_MspInit+0x5c>)
 8000284:	69db      	ldr	r3, [r3, #28]
 8000286:	4a0e      	ldr	r2, [pc, #56]	; (80002c0 <HAL_MspInit+0x5c>)
 8000288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800028c:	61d3      	str	r3, [r2, #28]
 800028e:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <HAL_MspInit+0x5c>)
 8000290:	69db      	ldr	r3, [r3, #28]
 8000292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800029a:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <HAL_MspInit+0x60>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002ae:	60fb      	str	r3, [r7, #12]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <HAL_MspInit+0x60>)
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	40021000 	.word	0x40021000
 80002c4:	40010000 	.word	0x40010000

080002c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002cc:	e7fe      	b.n	80002cc <NMI_Handler+0x4>

080002ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ce:	b480      	push	{r7}
 80002d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002d2:	e7fe      	b.n	80002d2 <HardFault_Handler+0x4>

080002d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002d8:	e7fe      	b.n	80002d8 <MemManage_Handler+0x4>

080002da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002da:	b480      	push	{r7}
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002de:	e7fe      	b.n	80002de <BusFault_Handler+0x4>

080002e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002e4:	e7fe      	b.n	80002e4 <UsageFault_Handler+0x4>

080002e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr

080002f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002f6:	bf00      	nop
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr

080002fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002fe:	b480      	push	{r7}
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000302:	bf00      	nop
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr

0800030a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800030a:	b580      	push	{r7, lr}
 800030c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800030e:	f000 f913 	bl	8000538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}

08000316 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000316:	b580      	push	{r7, lr}
 8000318:	b086      	sub	sp, #24
 800031a:	af00      	add	r7, sp, #0
 800031c:	60f8      	str	r0, [r7, #12]
 800031e:	60b9      	str	r1, [r7, #8]
 8000320:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]
 8000326:	e00a      	b.n	800033e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000328:	f3af 8000 	nop.w
 800032c:	4601      	mov	r1, r0
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	1c5a      	adds	r2, r3, #1
 8000332:	60ba      	str	r2, [r7, #8]
 8000334:	b2ca      	uxtb	r2, r1
 8000336:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000338:	697b      	ldr	r3, [r7, #20]
 800033a:	3301      	adds	r3, #1
 800033c:	617b      	str	r3, [r7, #20]
 800033e:	697a      	ldr	r2, [r7, #20]
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	429a      	cmp	r2, r3
 8000344:	dbf0      	blt.n	8000328 <_read+0x12>
	}

return len;
 8000346:	687b      	ldr	r3, [r7, #4]
}
 8000348:	4618      	mov	r0, r3
 800034a:	3718      	adds	r7, #24
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}

08000350 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800035c:	2300      	movs	r3, #0
 800035e:	617b      	str	r3, [r7, #20]
 8000360:	e009      	b.n	8000376 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	1c5a      	adds	r2, r3, #1
 8000366:	60ba      	str	r2, [r7, #8]
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	4618      	mov	r0, r3
 800036c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000370:	697b      	ldr	r3, [r7, #20]
 8000372:	3301      	adds	r3, #1
 8000374:	617b      	str	r3, [r7, #20]
 8000376:	697a      	ldr	r2, [r7, #20]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	429a      	cmp	r2, r3
 800037c:	dbf1      	blt.n	8000362 <_write+0x12>
	}
	return len;
 800037e:	687b      	ldr	r3, [r7, #4]
}
 8000380:	4618      	mov	r0, r3
 8000382:	3718      	adds	r7, #24
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <_close>:

int _close(int file)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	return -1;
 8000390:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000394:	4618      	mov	r0, r3
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr

0800039e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800039e:	b480      	push	{r7}
 80003a0:	b083      	sub	sp, #12
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	6078      	str	r0, [r7, #4]
 80003a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003ae:	605a      	str	r2, [r3, #4]
	return 0;
 80003b0:	2300      	movs	r3, #0
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr

080003bc <_isatty>:

int _isatty(int file)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	return 1;
 80003c4:	2301      	movs	r3, #1
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr

080003d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	60f8      	str	r0, [r7, #12]
 80003d8:	60b9      	str	r1, [r7, #8]
 80003da:	607a      	str	r2, [r7, #4]
	return 0;
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr

080003e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003f0:	4a14      	ldr	r2, [pc, #80]	; (8000444 <_sbrk+0x5c>)
 80003f2:	4b15      	ldr	r3, [pc, #84]	; (8000448 <_sbrk+0x60>)
 80003f4:	1ad3      	subs	r3, r2, r3
 80003f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003fc:	4b13      	ldr	r3, [pc, #76]	; (800044c <_sbrk+0x64>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d102      	bne.n	800040a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <_sbrk+0x64>)
 8000406:	4a12      	ldr	r2, [pc, #72]	; (8000450 <_sbrk+0x68>)
 8000408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800040a:	4b10      	ldr	r3, [pc, #64]	; (800044c <_sbrk+0x64>)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4413      	add	r3, r2
 8000412:	693a      	ldr	r2, [r7, #16]
 8000414:	429a      	cmp	r2, r3
 8000416:	d207      	bcs.n	8000428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000418:	f000 ff50 	bl	80012bc <__errno>
 800041c:	4603      	mov	r3, r0
 800041e:	220c      	movs	r2, #12
 8000420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000422:	f04f 33ff 	mov.w	r3, #4294967295
 8000426:	e009      	b.n	800043c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000428:	4b08      	ldr	r3, [pc, #32]	; (800044c <_sbrk+0x64>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800042e:	4b07      	ldr	r3, [pc, #28]	; (800044c <_sbrk+0x64>)
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4413      	add	r3, r2
 8000436:	4a05      	ldr	r2, [pc, #20]	; (800044c <_sbrk+0x64>)
 8000438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800043a:	68fb      	ldr	r3, [r7, #12]
}
 800043c:	4618      	mov	r0, r3
 800043e:	3718      	adds	r7, #24
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20005000 	.word	0x20005000
 8000448:	00000400 	.word	0x00000400
 800044c:	2000008c 	.word	0x2000008c
 8000450:	200000b0 	.word	0x200000b0

08000454 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000460:	480c      	ldr	r0, [pc, #48]	; (8000494 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000462:	490d      	ldr	r1, [pc, #52]	; (8000498 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000464:	4a0d      	ldr	r2, [pc, #52]	; (800049c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000468:	e002      	b.n	8000470 <LoopCopyDataInit>

0800046a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800046c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046e:	3304      	adds	r3, #4

08000470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000474:	d3f9      	bcc.n	800046a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000476:	4a0a      	ldr	r2, [pc, #40]	; (80004a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000478:	4c0a      	ldr	r4, [pc, #40]	; (80004a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800047c:	e001      	b.n	8000482 <LoopFillZerobss>

0800047e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000480:	3204      	adds	r2, #4

08000482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000484:	d3fb      	bcc.n	800047e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000486:	f7ff ffe5 	bl	8000454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800048a:	f000 ff1d 	bl	80012c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800048e:	f7ff fe5d 	bl	800014c <main>
  bx lr
 8000492:	4770      	bx	lr
  ldr r0, =_sdata
 8000494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000498:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800049c:	08001d58 	.word	0x08001d58
  ldr r2, =_sbss
 80004a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80004a4:	200000ac 	.word	0x200000ac

080004a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a8:	e7fe      	b.n	80004a8 <ADC1_2_IRQHandler>
	...

080004ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <HAL_Init+0x28>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a07      	ldr	r2, [pc, #28]	; (80004d4 <HAL_Init+0x28>)
 80004b6:	f043 0310 	orr.w	r3, r3, #16
 80004ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004bc:	2003      	movs	r0, #3
 80004be:	f000 f92b 	bl	8000718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004c2:	200f      	movs	r0, #15
 80004c4:	f000 f808 	bl	80004d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004c8:	f7ff fecc 	bl	8000264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004cc:	2300      	movs	r3, #0
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40022000 	.word	0x40022000

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	4b12      	ldr	r3, [pc, #72]	; (800052c <HAL_InitTick+0x54>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <HAL_InitTick+0x58>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	4619      	mov	r1, r3
 80004ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80004f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 f935 	bl	8000766 <HAL_SYSTICK_Config>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000502:	2301      	movs	r3, #1
 8000504:	e00e      	b.n	8000524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2b0f      	cmp	r3, #15
 800050a:	d80a      	bhi.n	8000522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800050c:	2200      	movs	r2, #0
 800050e:	6879      	ldr	r1, [r7, #4]
 8000510:	f04f 30ff 	mov.w	r0, #4294967295
 8000514:	f000 f90b 	bl	800072e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000518:	4a06      	ldr	r2, [pc, #24]	; (8000534 <HAL_InitTick+0x5c>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800051e:	2300      	movs	r3, #0
 8000520:	e000      	b.n	8000524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000522:	2301      	movs	r3, #1
}
 8000524:	4618      	mov	r0, r3
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000000 	.word	0x20000000
 8000530:	20000008 	.word	0x20000008
 8000534:	20000004 	.word	0x20000004

08000538 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <HAL_IncTick+0x1c>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	461a      	mov	r2, r3
 8000542:	4b05      	ldr	r3, [pc, #20]	; (8000558 <HAL_IncTick+0x20>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4413      	add	r3, r2
 8000548:	4a03      	ldr	r2, [pc, #12]	; (8000558 <HAL_IncTick+0x20>)
 800054a:	6013      	str	r3, [r2, #0]
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	20000008 	.word	0x20000008
 8000558:	20000098 	.word	0x20000098

0800055c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  return uwTick;
 8000560:	4b02      	ldr	r3, [pc, #8]	; (800056c <HAL_GetTick+0x10>)
 8000562:	681b      	ldr	r3, [r3, #0]
}
 8000564:	4618      	mov	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	20000098 	.word	0x20000098

08000570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000578:	f7ff fff0 	bl	800055c <HAL_GetTick>
 800057c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000588:	d005      	beq.n	8000596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <HAL_Delay+0x44>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	461a      	mov	r2, r3
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4413      	add	r3, r2
 8000594:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000596:	bf00      	nop
 8000598:	f7ff ffe0 	bl	800055c <HAL_GetTick>
 800059c:	4602      	mov	r2, r0
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d8f7      	bhi.n	8000598 <HAL_Delay+0x28>
  {
  }
}
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000008 	.word	0x20000008

080005b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f003 0307 	and.w	r3, r3, #7
 80005c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <__NVIC_SetPriorityGrouping+0x44>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ce:	68ba      	ldr	r2, [r7, #8]
 80005d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005d4:	4013      	ands	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ea:	4a04      	ldr	r2, [pc, #16]	; (80005fc <__NVIC_SetPriorityGrouping+0x44>)
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	60d3      	str	r3, [r2, #12]
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <__NVIC_GetPriorityGrouping+0x18>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	0a1b      	lsrs	r3, r3, #8
 800060a:	f003 0307 	and.w	r3, r3, #7
}
 800060e:	4618      	mov	r0, r3
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	6039      	str	r1, [r7, #0]
 8000626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062c:	2b00      	cmp	r3, #0
 800062e:	db0a      	blt.n	8000646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	b2da      	uxtb	r2, r3
 8000634:	490c      	ldr	r1, [pc, #48]	; (8000668 <__NVIC_SetPriority+0x4c>)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	0112      	lsls	r2, r2, #4
 800063c:	b2d2      	uxtb	r2, r2
 800063e:	440b      	add	r3, r1
 8000640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000644:	e00a      	b.n	800065c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4908      	ldr	r1, [pc, #32]	; (800066c <__NVIC_SetPriority+0x50>)
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	f003 030f 	and.w	r3, r3, #15
 8000652:	3b04      	subs	r3, #4
 8000654:	0112      	lsls	r2, r2, #4
 8000656:	b2d2      	uxtb	r2, r2
 8000658:	440b      	add	r3, r1
 800065a:	761a      	strb	r2, [r3, #24]
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000e100 	.word	0xe000e100
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000670:	b480      	push	{r7}
 8000672:	b089      	sub	sp, #36	; 0x24
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	f1c3 0307 	rsb	r3, r3, #7
 800068a:	2b04      	cmp	r3, #4
 800068c:	bf28      	it	cs
 800068e:	2304      	movcs	r3, #4
 8000690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	3304      	adds	r3, #4
 8000696:	2b06      	cmp	r3, #6
 8000698:	d902      	bls.n	80006a0 <NVIC_EncodePriority+0x30>
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	3b03      	subs	r3, #3
 800069e:	e000      	b.n	80006a2 <NVIC_EncodePriority+0x32>
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	f04f 32ff 	mov.w	r2, #4294967295
 80006a8:	69bb      	ldr	r3, [r7, #24]
 80006aa:	fa02 f303 	lsl.w	r3, r2, r3
 80006ae:	43da      	mvns	r2, r3
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	401a      	ands	r2, r3
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006b8:	f04f 31ff 	mov.w	r1, #4294967295
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	fa01 f303 	lsl.w	r3, r1, r3
 80006c2:	43d9      	mvns	r1, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c8:	4313      	orrs	r3, r2
         );
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3724      	adds	r7, #36	; 0x24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3b01      	subs	r3, #1
 80006e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006e4:	d301      	bcc.n	80006ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006e6:	2301      	movs	r3, #1
 80006e8:	e00f      	b.n	800070a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ea:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <SysTick_Config+0x40>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3b01      	subs	r3, #1
 80006f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006f2:	210f      	movs	r1, #15
 80006f4:	f04f 30ff 	mov.w	r0, #4294967295
 80006f8:	f7ff ff90 	bl	800061c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <SysTick_Config+0x40>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000702:	4b04      	ldr	r3, [pc, #16]	; (8000714 <SysTick_Config+0x40>)
 8000704:	2207      	movs	r2, #7
 8000706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000708:	2300      	movs	r3, #0
}
 800070a:	4618      	mov	r0, r3
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	e000e010 	.word	0xe000e010

08000718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff ff49 	bl	80005b8 <__NVIC_SetPriorityGrouping>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800072e:	b580      	push	{r7, lr}
 8000730:	b086      	sub	sp, #24
 8000732:	af00      	add	r7, sp, #0
 8000734:	4603      	mov	r3, r0
 8000736:	60b9      	str	r1, [r7, #8]
 8000738:	607a      	str	r2, [r7, #4]
 800073a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000740:	f7ff ff5e 	bl	8000600 <__NVIC_GetPriorityGrouping>
 8000744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	68b9      	ldr	r1, [r7, #8]
 800074a:	6978      	ldr	r0, [r7, #20]
 800074c:	f7ff ff90 	bl	8000670 <NVIC_EncodePriority>
 8000750:	4602      	mov	r2, r0
 8000752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000756:	4611      	mov	r1, r2
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff5f 	bl	800061c <__NVIC_SetPriority>
}
 800075e:	bf00      	nop
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ffb0 	bl	80006d4 <SysTick_Config>
 8000774:	4603      	mov	r3, r0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000780:	b480      	push	{r7}
 8000782:	b08b      	sub	sp, #44	; 0x2c
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000792:	e169      	b.n	8000a68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000794:	2201      	movs	r2, #1
 8000796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
 800079c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	69fa      	ldr	r2, [r7, #28]
 80007a4:	4013      	ands	r3, r2
 80007a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007a8:	69ba      	ldr	r2, [r7, #24]
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	f040 8158 	bne.w	8000a62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	4a9a      	ldr	r2, [pc, #616]	; (8000a20 <HAL_GPIO_Init+0x2a0>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d05e      	beq.n	800087a <HAL_GPIO_Init+0xfa>
 80007bc:	4a98      	ldr	r2, [pc, #608]	; (8000a20 <HAL_GPIO_Init+0x2a0>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d875      	bhi.n	80008ae <HAL_GPIO_Init+0x12e>
 80007c2:	4a98      	ldr	r2, [pc, #608]	; (8000a24 <HAL_GPIO_Init+0x2a4>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d058      	beq.n	800087a <HAL_GPIO_Init+0xfa>
 80007c8:	4a96      	ldr	r2, [pc, #600]	; (8000a24 <HAL_GPIO_Init+0x2a4>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d86f      	bhi.n	80008ae <HAL_GPIO_Init+0x12e>
 80007ce:	4a96      	ldr	r2, [pc, #600]	; (8000a28 <HAL_GPIO_Init+0x2a8>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d052      	beq.n	800087a <HAL_GPIO_Init+0xfa>
 80007d4:	4a94      	ldr	r2, [pc, #592]	; (8000a28 <HAL_GPIO_Init+0x2a8>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d869      	bhi.n	80008ae <HAL_GPIO_Init+0x12e>
 80007da:	4a94      	ldr	r2, [pc, #592]	; (8000a2c <HAL_GPIO_Init+0x2ac>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d04c      	beq.n	800087a <HAL_GPIO_Init+0xfa>
 80007e0:	4a92      	ldr	r2, [pc, #584]	; (8000a2c <HAL_GPIO_Init+0x2ac>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d863      	bhi.n	80008ae <HAL_GPIO_Init+0x12e>
 80007e6:	4a92      	ldr	r2, [pc, #584]	; (8000a30 <HAL_GPIO_Init+0x2b0>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d046      	beq.n	800087a <HAL_GPIO_Init+0xfa>
 80007ec:	4a90      	ldr	r2, [pc, #576]	; (8000a30 <HAL_GPIO_Init+0x2b0>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d85d      	bhi.n	80008ae <HAL_GPIO_Init+0x12e>
 80007f2:	2b12      	cmp	r3, #18
 80007f4:	d82a      	bhi.n	800084c <HAL_GPIO_Init+0xcc>
 80007f6:	2b12      	cmp	r3, #18
 80007f8:	d859      	bhi.n	80008ae <HAL_GPIO_Init+0x12e>
 80007fa:	a201      	add	r2, pc, #4	; (adr r2, 8000800 <HAL_GPIO_Init+0x80>)
 80007fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000800:	0800087b 	.word	0x0800087b
 8000804:	08000855 	.word	0x08000855
 8000808:	08000867 	.word	0x08000867
 800080c:	080008a9 	.word	0x080008a9
 8000810:	080008af 	.word	0x080008af
 8000814:	080008af 	.word	0x080008af
 8000818:	080008af 	.word	0x080008af
 800081c:	080008af 	.word	0x080008af
 8000820:	080008af 	.word	0x080008af
 8000824:	080008af 	.word	0x080008af
 8000828:	080008af 	.word	0x080008af
 800082c:	080008af 	.word	0x080008af
 8000830:	080008af 	.word	0x080008af
 8000834:	080008af 	.word	0x080008af
 8000838:	080008af 	.word	0x080008af
 800083c:	080008af 	.word	0x080008af
 8000840:	080008af 	.word	0x080008af
 8000844:	0800085d 	.word	0x0800085d
 8000848:	08000871 	.word	0x08000871
 800084c:	4a79      	ldr	r2, [pc, #484]	; (8000a34 <HAL_GPIO_Init+0x2b4>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d013      	beq.n	800087a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000852:	e02c      	b.n	80008ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	623b      	str	r3, [r7, #32]
          break;
 800085a:	e029      	b.n	80008b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	3304      	adds	r3, #4
 8000862:	623b      	str	r3, [r7, #32]
          break;
 8000864:	e024      	b.n	80008b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	3308      	adds	r3, #8
 800086c:	623b      	str	r3, [r7, #32]
          break;
 800086e:	e01f      	b.n	80008b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	330c      	adds	r3, #12
 8000876:	623b      	str	r3, [r7, #32]
          break;
 8000878:	e01a      	b.n	80008b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d102      	bne.n	8000888 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000882:	2304      	movs	r3, #4
 8000884:	623b      	str	r3, [r7, #32]
          break;
 8000886:	e013      	b.n	80008b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d105      	bne.n	800089c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000890:	2308      	movs	r3, #8
 8000892:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	69fa      	ldr	r2, [r7, #28]
 8000898:	611a      	str	r2, [r3, #16]
          break;
 800089a:	e009      	b.n	80008b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800089c:	2308      	movs	r3, #8
 800089e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	69fa      	ldr	r2, [r7, #28]
 80008a4:	615a      	str	r2, [r3, #20]
          break;
 80008a6:	e003      	b.n	80008b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
          break;
 80008ac:	e000      	b.n	80008b0 <HAL_GPIO_Init+0x130>
          break;
 80008ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	2bff      	cmp	r3, #255	; 0xff
 80008b4:	d801      	bhi.n	80008ba <HAL_GPIO_Init+0x13a>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	e001      	b.n	80008be <HAL_GPIO_Init+0x13e>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3304      	adds	r3, #4
 80008be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	2bff      	cmp	r3, #255	; 0xff
 80008c4:	d802      	bhi.n	80008cc <HAL_GPIO_Init+0x14c>
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	e002      	b.n	80008d2 <HAL_GPIO_Init+0x152>
 80008cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ce:	3b08      	subs	r3, #8
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	210f      	movs	r1, #15
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	fa01 f303 	lsl.w	r3, r1, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	401a      	ands	r2, r3
 80008e4:	6a39      	ldr	r1, [r7, #32]
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ec:	431a      	orrs	r2, r3
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	f000 80b1 	beq.w	8000a62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000900:	4b4d      	ldr	r3, [pc, #308]	; (8000a38 <HAL_GPIO_Init+0x2b8>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a4c      	ldr	r2, [pc, #304]	; (8000a38 <HAL_GPIO_Init+0x2b8>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b4a      	ldr	r3, [pc, #296]	; (8000a38 <HAL_GPIO_Init+0x2b8>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000918:	4a48      	ldr	r2, [pc, #288]	; (8000a3c <HAL_GPIO_Init+0x2bc>)
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	089b      	lsrs	r3, r3, #2
 800091e:	3302      	adds	r3, #2
 8000920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000924:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000928:	f003 0303 	and.w	r3, r3, #3
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	220f      	movs	r2, #15
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	4013      	ands	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a40      	ldr	r2, [pc, #256]	; (8000a40 <HAL_GPIO_Init+0x2c0>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d013      	beq.n	800096c <HAL_GPIO_Init+0x1ec>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a3f      	ldr	r2, [pc, #252]	; (8000a44 <HAL_GPIO_Init+0x2c4>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d00d      	beq.n	8000968 <HAL_GPIO_Init+0x1e8>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a3e      	ldr	r2, [pc, #248]	; (8000a48 <HAL_GPIO_Init+0x2c8>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d007      	beq.n	8000964 <HAL_GPIO_Init+0x1e4>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a3d      	ldr	r2, [pc, #244]	; (8000a4c <HAL_GPIO_Init+0x2cc>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d101      	bne.n	8000960 <HAL_GPIO_Init+0x1e0>
 800095c:	2303      	movs	r3, #3
 800095e:	e006      	b.n	800096e <HAL_GPIO_Init+0x1ee>
 8000960:	2304      	movs	r3, #4
 8000962:	e004      	b.n	800096e <HAL_GPIO_Init+0x1ee>
 8000964:	2302      	movs	r3, #2
 8000966:	e002      	b.n	800096e <HAL_GPIO_Init+0x1ee>
 8000968:	2301      	movs	r3, #1
 800096a:	e000      	b.n	800096e <HAL_GPIO_Init+0x1ee>
 800096c:	2300      	movs	r3, #0
 800096e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000970:	f002 0203 	and.w	r2, r2, #3
 8000974:	0092      	lsls	r2, r2, #2
 8000976:	4093      	lsls	r3, r2
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	4313      	orrs	r3, r2
 800097c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800097e:	492f      	ldr	r1, [pc, #188]	; (8000a3c <HAL_GPIO_Init+0x2bc>)
 8000980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000982:	089b      	lsrs	r3, r3, #2
 8000984:	3302      	adds	r3, #2
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000994:	2b00      	cmp	r3, #0
 8000996:	d006      	beq.n	80009a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000998:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <HAL_GPIO_Init+0x2d0>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	492c      	ldr	r1, [pc, #176]	; (8000a50 <HAL_GPIO_Init+0x2d0>)
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	600b      	str	r3, [r1, #0]
 80009a4:	e006      	b.n	80009b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009a6:	4b2a      	ldr	r3, [pc, #168]	; (8000a50 <HAL_GPIO_Init+0x2d0>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	43db      	mvns	r3, r3
 80009ae:	4928      	ldr	r1, [pc, #160]	; (8000a50 <HAL_GPIO_Init+0x2d0>)
 80009b0:	4013      	ands	r3, r2
 80009b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d006      	beq.n	80009ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009c0:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <HAL_GPIO_Init+0x2d0>)
 80009c2:	685a      	ldr	r2, [r3, #4]
 80009c4:	4922      	ldr	r1, [pc, #136]	; (8000a50 <HAL_GPIO_Init+0x2d0>)
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	604b      	str	r3, [r1, #4]
 80009cc:	e006      	b.n	80009dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <HAL_GPIO_Init+0x2d0>)
 80009d0:	685a      	ldr	r2, [r3, #4]
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	43db      	mvns	r3, r3
 80009d6:	491e      	ldr	r1, [pc, #120]	; (8000a50 <HAL_GPIO_Init+0x2d0>)
 80009d8:	4013      	ands	r3, r2
 80009da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d006      	beq.n	80009f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009e8:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <HAL_GPIO_Init+0x2d0>)
 80009ea:	689a      	ldr	r2, [r3, #8]
 80009ec:	4918      	ldr	r1, [pc, #96]	; (8000a50 <HAL_GPIO_Init+0x2d0>)
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	608b      	str	r3, [r1, #8]
 80009f4:	e006      	b.n	8000a04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <HAL_GPIO_Init+0x2d0>)
 80009f8:	689a      	ldr	r2, [r3, #8]
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	43db      	mvns	r3, r3
 80009fe:	4914      	ldr	r1, [pc, #80]	; (8000a50 <HAL_GPIO_Init+0x2d0>)
 8000a00:	4013      	ands	r3, r2
 8000a02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d021      	beq.n	8000a54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_GPIO_Init+0x2d0>)
 8000a12:	68da      	ldr	r2, [r3, #12]
 8000a14:	490e      	ldr	r1, [pc, #56]	; (8000a50 <HAL_GPIO_Init+0x2d0>)
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	60cb      	str	r3, [r1, #12]
 8000a1c:	e021      	b.n	8000a62 <HAL_GPIO_Init+0x2e2>
 8000a1e:	bf00      	nop
 8000a20:	10320000 	.word	0x10320000
 8000a24:	10310000 	.word	0x10310000
 8000a28:	10220000 	.word	0x10220000
 8000a2c:	10210000 	.word	0x10210000
 8000a30:	10120000 	.word	0x10120000
 8000a34:	10110000 	.word	0x10110000
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40010000 	.word	0x40010000
 8000a40:	40010800 	.word	0x40010800
 8000a44:	40010c00 	.word	0x40010c00
 8000a48:	40011000 	.word	0x40011000
 8000a4c:	40011400 	.word	0x40011400
 8000a50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <HAL_GPIO_Init+0x304>)
 8000a56:	68da      	ldr	r2, [r3, #12]
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	4909      	ldr	r1, [pc, #36]	; (8000a84 <HAL_GPIO_Init+0x304>)
 8000a5e:	4013      	ands	r3, r2
 8000a60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a64:	3301      	adds	r3, #1
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f47f ae8e 	bne.w	8000794 <HAL_GPIO_Init+0x14>
  }
}
 8000a78:	bf00      	nop
 8000a7a:	bf00      	nop
 8000a7c:	372c      	adds	r7, #44	; 0x2c
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	40010400 	.word	0x40010400

08000a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	807b      	strh	r3, [r7, #2]
 8000a94:	4613      	mov	r3, r2
 8000a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a98:	787b      	ldrb	r3, [r7, #1]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a9e:	887a      	ldrh	r2, [r7, #2]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000aa4:	e003      	b.n	8000aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aa6:	887b      	ldrh	r3, [r7, #2]
 8000aa8:	041a      	lsls	r2, r3, #16
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	611a      	str	r2, [r3, #16]
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000aca:	887a      	ldrh	r2, [r7, #2]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	041a      	lsls	r2, r3, #16
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	43d9      	mvns	r1, r3
 8000ad6:	887b      	ldrh	r3, [r7, #2]
 8000ad8:	400b      	ands	r3, r1
 8000ada:	431a      	orrs	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	611a      	str	r2, [r3, #16]
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
	...

08000aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d101      	bne.n	8000afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e26c      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f000 8087 	beq.w	8000c1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b0c:	4b92      	ldr	r3, [pc, #584]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f003 030c 	and.w	r3, r3, #12
 8000b14:	2b04      	cmp	r3, #4
 8000b16:	d00c      	beq.n	8000b32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b18:	4b8f      	ldr	r3, [pc, #572]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f003 030c 	and.w	r3, r3, #12
 8000b20:	2b08      	cmp	r3, #8
 8000b22:	d112      	bne.n	8000b4a <HAL_RCC_OscConfig+0x5e>
 8000b24:	4b8c      	ldr	r3, [pc, #560]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b30:	d10b      	bne.n	8000b4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b32:	4b89      	ldr	r3, [pc, #548]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d06c      	beq.n	8000c18 <HAL_RCC_OscConfig+0x12c>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d168      	bne.n	8000c18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e246      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b52:	d106      	bne.n	8000b62 <HAL_RCC_OscConfig+0x76>
 8000b54:	4b80      	ldr	r3, [pc, #512]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a7f      	ldr	r2, [pc, #508]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b5e:	6013      	str	r3, [r2, #0]
 8000b60:	e02e      	b.n	8000bc0 <HAL_RCC_OscConfig+0xd4>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d10c      	bne.n	8000b84 <HAL_RCC_OscConfig+0x98>
 8000b6a:	4b7b      	ldr	r3, [pc, #492]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a7a      	ldr	r2, [pc, #488]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	4b78      	ldr	r3, [pc, #480]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a77      	ldr	r2, [pc, #476]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	e01d      	b.n	8000bc0 <HAL_RCC_OscConfig+0xd4>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b8c:	d10c      	bne.n	8000ba8 <HAL_RCC_OscConfig+0xbc>
 8000b8e:	4b72      	ldr	r3, [pc, #456]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a71      	ldr	r2, [pc, #452]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	4b6f      	ldr	r3, [pc, #444]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a6e      	ldr	r2, [pc, #440]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	e00b      	b.n	8000bc0 <HAL_RCC_OscConfig+0xd4>
 8000ba8:	4b6b      	ldr	r3, [pc, #428]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a6a      	ldr	r2, [pc, #424]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	4b68      	ldr	r3, [pc, #416]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a67      	ldr	r2, [pc, #412]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d013      	beq.n	8000bf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc8:	f7ff fcc8 	bl	800055c <HAL_GetTick>
 8000bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bce:	e008      	b.n	8000be2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bd0:	f7ff fcc4 	bl	800055c <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	2b64      	cmp	r3, #100	; 0x64
 8000bdc:	d901      	bls.n	8000be2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bde:	2303      	movs	r3, #3
 8000be0:	e1fa      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be2:	4b5d      	ldr	r3, [pc, #372]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0f0      	beq.n	8000bd0 <HAL_RCC_OscConfig+0xe4>
 8000bee:	e014      	b.n	8000c1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf0:	f7ff fcb4 	bl	800055c <HAL_GetTick>
 8000bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bf6:	e008      	b.n	8000c0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bf8:	f7ff fcb0 	bl	800055c <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b64      	cmp	r3, #100	; 0x64
 8000c04:	d901      	bls.n	8000c0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c06:	2303      	movs	r3, #3
 8000c08:	e1e6      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c0a:	4b53      	ldr	r3, [pc, #332]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1f0      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x10c>
 8000c16:	e000      	b.n	8000c1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d063      	beq.n	8000cee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c26:	4b4c      	ldr	r3, [pc, #304]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 030c 	and.w	r3, r3, #12
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00b      	beq.n	8000c4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c32:	4b49      	ldr	r3, [pc, #292]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f003 030c 	and.w	r3, r3, #12
 8000c3a:	2b08      	cmp	r3, #8
 8000c3c:	d11c      	bne.n	8000c78 <HAL_RCC_OscConfig+0x18c>
 8000c3e:	4b46      	ldr	r3, [pc, #280]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d116      	bne.n	8000c78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c4a:	4b43      	ldr	r3, [pc, #268]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d005      	beq.n	8000c62 <HAL_RCC_OscConfig+0x176>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d001      	beq.n	8000c62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e1ba      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c62:	4b3d      	ldr	r3, [pc, #244]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	4939      	ldr	r1, [pc, #228]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000c72:	4313      	orrs	r3, r2
 8000c74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c76:	e03a      	b.n	8000cee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d020      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c80:	4b36      	ldr	r3, [pc, #216]	; (8000d5c <HAL_RCC_OscConfig+0x270>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c86:	f7ff fc69 	bl	800055c <HAL_GetTick>
 8000c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c8c:	e008      	b.n	8000ca0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c8e:	f7ff fc65 	bl	800055c <HAL_GetTick>
 8000c92:	4602      	mov	r2, r0
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d901      	bls.n	8000ca0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	e19b      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca0:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 0302 	and.w	r3, r3, #2
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d0f0      	beq.n	8000c8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cac:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	4927      	ldr	r1, [pc, #156]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	600b      	str	r3, [r1, #0]
 8000cc0:	e015      	b.n	8000cee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cc2:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <HAL_RCC_OscConfig+0x270>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc8:	f7ff fc48 	bl	800055c <HAL_GetTick>
 8000ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cd0:	f7ff fc44 	bl	800055c <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e17a      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f0      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d03a      	beq.n	8000d70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d019      	beq.n	8000d36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <HAL_RCC_OscConfig+0x274>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d08:	f7ff fc28 	bl	800055c <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d10:	f7ff fc24 	bl	800055c <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e15a      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0f0      	beq.n	8000d10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f000 faa6 	bl	8001280 <RCC_Delay>
 8000d34:	e01c      	b.n	8000d70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_RCC_OscConfig+0x274>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d3c:	f7ff fc0e 	bl	800055c <HAL_GetTick>
 8000d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d42:	e00f      	b.n	8000d64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d44:	f7ff fc0a 	bl	800055c <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d908      	bls.n	8000d64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d52:	2303      	movs	r3, #3
 8000d54:	e140      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
 8000d56:	bf00      	nop
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	42420000 	.word	0x42420000
 8000d60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d64:	4b9e      	ldr	r3, [pc, #632]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1e9      	bne.n	8000d44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f000 80a6 	beq.w	8000eca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d82:	4b97      	ldr	r3, [pc, #604]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d10d      	bne.n	8000daa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b94      	ldr	r3, [pc, #592]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	4a93      	ldr	r2, [pc, #588]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	61d3      	str	r3, [r2, #28]
 8000d9a:	4b91      	ldr	r3, [pc, #580]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000da6:	2301      	movs	r3, #1
 8000da8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000daa:	4b8e      	ldr	r3, [pc, #568]	; (8000fe4 <HAL_RCC_OscConfig+0x4f8>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d118      	bne.n	8000de8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000db6:	4b8b      	ldr	r3, [pc, #556]	; (8000fe4 <HAL_RCC_OscConfig+0x4f8>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a8a      	ldr	r2, [pc, #552]	; (8000fe4 <HAL_RCC_OscConfig+0x4f8>)
 8000dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dc2:	f7ff fbcb 	bl	800055c <HAL_GetTick>
 8000dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc8:	e008      	b.n	8000ddc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dca:	f7ff fbc7 	bl	800055c <HAL_GetTick>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	2b64      	cmp	r3, #100	; 0x64
 8000dd6:	d901      	bls.n	8000ddc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e0fd      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ddc:	4b81      	ldr	r3, [pc, #516]	; (8000fe4 <HAL_RCC_OscConfig+0x4f8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0f0      	beq.n	8000dca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d106      	bne.n	8000dfe <HAL_RCC_OscConfig+0x312>
 8000df0:	4b7b      	ldr	r3, [pc, #492]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	4a7a      	ldr	r2, [pc, #488]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6213      	str	r3, [r2, #32]
 8000dfc:	e02d      	b.n	8000e5a <HAL_RCC_OscConfig+0x36e>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10c      	bne.n	8000e20 <HAL_RCC_OscConfig+0x334>
 8000e06:	4b76      	ldr	r3, [pc, #472]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e08:	6a1b      	ldr	r3, [r3, #32]
 8000e0a:	4a75      	ldr	r2, [pc, #468]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e0c:	f023 0301 	bic.w	r3, r3, #1
 8000e10:	6213      	str	r3, [r2, #32]
 8000e12:	4b73      	ldr	r3, [pc, #460]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e14:	6a1b      	ldr	r3, [r3, #32]
 8000e16:	4a72      	ldr	r2, [pc, #456]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e18:	f023 0304 	bic.w	r3, r3, #4
 8000e1c:	6213      	str	r3, [r2, #32]
 8000e1e:	e01c      	b.n	8000e5a <HAL_RCC_OscConfig+0x36e>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	2b05      	cmp	r3, #5
 8000e26:	d10c      	bne.n	8000e42 <HAL_RCC_OscConfig+0x356>
 8000e28:	4b6d      	ldr	r3, [pc, #436]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e2a:	6a1b      	ldr	r3, [r3, #32]
 8000e2c:	4a6c      	ldr	r2, [pc, #432]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	6213      	str	r3, [r2, #32]
 8000e34:	4b6a      	ldr	r3, [pc, #424]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	4a69      	ldr	r2, [pc, #420]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6213      	str	r3, [r2, #32]
 8000e40:	e00b      	b.n	8000e5a <HAL_RCC_OscConfig+0x36e>
 8000e42:	4b67      	ldr	r3, [pc, #412]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e44:	6a1b      	ldr	r3, [r3, #32]
 8000e46:	4a66      	ldr	r2, [pc, #408]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e48:	f023 0301 	bic.w	r3, r3, #1
 8000e4c:	6213      	str	r3, [r2, #32]
 8000e4e:	4b64      	ldr	r3, [pc, #400]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e50:	6a1b      	ldr	r3, [r3, #32]
 8000e52:	4a63      	ldr	r2, [pc, #396]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e54:	f023 0304 	bic.w	r3, r3, #4
 8000e58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d015      	beq.n	8000e8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e62:	f7ff fb7b 	bl	800055c <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e68:	e00a      	b.n	8000e80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e6a:	f7ff fb77 	bl	800055c <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e0ab      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e80:	4b57      	ldr	r3, [pc, #348]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0ee      	beq.n	8000e6a <HAL_RCC_OscConfig+0x37e>
 8000e8c:	e014      	b.n	8000eb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e8e:	f7ff fb65 	bl	800055c <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e94:	e00a      	b.n	8000eac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e96:	f7ff fb61 	bl	800055c <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e095      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eac:	4b4c      	ldr	r3, [pc, #304]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000eae:	6a1b      	ldr	r3, [r3, #32]
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1ee      	bne.n	8000e96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d105      	bne.n	8000eca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ebe:	4b48      	ldr	r3, [pc, #288]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	4a47      	ldr	r2, [pc, #284]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f000 8081 	beq.w	8000fd6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ed4:	4b42      	ldr	r3, [pc, #264]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 030c 	and.w	r3, r3, #12
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d061      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d146      	bne.n	8000f76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ee8:	4b3f      	ldr	r3, [pc, #252]	; (8000fe8 <HAL_RCC_OscConfig+0x4fc>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eee:	f7ff fb35 	bl	800055c <HAL_GetTick>
 8000ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ef4:	e008      	b.n	8000f08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ef6:	f7ff fb31 	bl	800055c <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d901      	bls.n	8000f08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e067      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f08:	4b35      	ldr	r3, [pc, #212]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1f0      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f1c:	d108      	bne.n	8000f30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f1e:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	492d      	ldr	r1, [pc, #180]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f30:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a19      	ldr	r1, [r3, #32]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f40:	430b      	orrs	r3, r1
 8000f42:	4927      	ldr	r1, [pc, #156]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000f44:	4313      	orrs	r3, r2
 8000f46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f48:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <HAL_RCC_OscConfig+0x4fc>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4e:	f7ff fb05 	bl	800055c <HAL_GetTick>
 8000f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f54:	e008      	b.n	8000f68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f56:	f7ff fb01 	bl	800055c <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d901      	bls.n	8000f68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e037      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f68:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d0f0      	beq.n	8000f56 <HAL_RCC_OscConfig+0x46a>
 8000f74:	e02f      	b.n	8000fd6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <HAL_RCC_OscConfig+0x4fc>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7c:	f7ff faee 	bl	800055c <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f84:	f7ff faea 	bl	800055c <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e020      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f0      	bne.n	8000f84 <HAL_RCC_OscConfig+0x498>
 8000fa2:	e018      	b.n	8000fd6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d101      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e013      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d106      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d001      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40007000 	.word	0x40007000
 8000fe8:	42420060 	.word	0x42420060

08000fec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e0d0      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001000:	4b6a      	ldr	r3, [pc, #424]	; (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	429a      	cmp	r2, r3
 800100c:	d910      	bls.n	8001030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800100e:	4b67      	ldr	r3, [pc, #412]	; (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f023 0207 	bic.w	r2, r3, #7
 8001016:	4965      	ldr	r1, [pc, #404]	; (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	4313      	orrs	r3, r2
 800101c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800101e:	4b63      	ldr	r3, [pc, #396]	; (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d001      	beq.n	8001030 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e0b8      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d020      	beq.n	800107e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	d005      	beq.n	8001054 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001048:	4b59      	ldr	r3, [pc, #356]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	4a58      	ldr	r2, [pc, #352]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 800104e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001052:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0308 	and.w	r3, r3, #8
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001060:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4a52      	ldr	r2, [pc, #328]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001066:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800106a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800106c:	4b50      	ldr	r3, [pc, #320]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	494d      	ldr	r1, [pc, #308]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 800107a:	4313      	orrs	r3, r2
 800107c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b00      	cmp	r3, #0
 8001088:	d040      	beq.n	800110c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d107      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001092:	4b47      	ldr	r3, [pc, #284]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d115      	bne.n	80010ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e07f      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d107      	bne.n	80010ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010aa:	4b41      	ldr	r3, [pc, #260]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d109      	bne.n	80010ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e073      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ba:	4b3d      	ldr	r3, [pc, #244]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e06b      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ca:	4b39      	ldr	r3, [pc, #228]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f023 0203 	bic.w	r2, r3, #3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	4936      	ldr	r1, [pc, #216]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 80010d8:	4313      	orrs	r3, r2
 80010da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010dc:	f7ff fa3e 	bl	800055c <HAL_GetTick>
 80010e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010e2:	e00a      	b.n	80010fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010e4:	f7ff fa3a 	bl	800055c <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e053      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fa:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 020c 	and.w	r2, r3, #12
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	429a      	cmp	r2, r3
 800110a:	d1eb      	bne.n	80010e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800110c:	4b27      	ldr	r3, [pc, #156]	; (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	429a      	cmp	r2, r3
 8001118:	d210      	bcs.n	800113c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800111a:	4b24      	ldr	r3, [pc, #144]	; (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f023 0207 	bic.w	r2, r3, #7
 8001122:	4922      	ldr	r1, [pc, #136]	; (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	4313      	orrs	r3, r2
 8001128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d001      	beq.n	800113c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e032      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	d008      	beq.n	800115a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001148:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	4916      	ldr	r1, [pc, #88]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001156:	4313      	orrs	r3, r2
 8001158:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	2b00      	cmp	r3, #0
 8001164:	d009      	beq.n	800117a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	490e      	ldr	r1, [pc, #56]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001176:	4313      	orrs	r3, r2
 8001178:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800117a:	f000 f821 	bl	80011c0 <HAL_RCC_GetSysClockFreq>
 800117e:	4602      	mov	r2, r0
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	490a      	ldr	r1, [pc, #40]	; (80011b4 <HAL_RCC_ClockConfig+0x1c8>)
 800118c:	5ccb      	ldrb	r3, [r1, r3]
 800118e:	fa22 f303 	lsr.w	r3, r2, r3
 8001192:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_RCC_ClockConfig+0x1d0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f99c 	bl	80004d8 <HAL_InitTick>

  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40022000 	.word	0x40022000
 80011b0:	40021000 	.word	0x40021000
 80011b4:	08001cdc 	.word	0x08001cdc
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000004 	.word	0x20000004

080011c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011c0:	b490      	push	{r4, r7}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <HAL_RCC_GetSysClockFreq+0xb0>)
 80011c8:	1d3c      	adds	r4, r7, #4
 80011ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011d0:	f240 2301 	movw	r3, #513	; 0x201
 80011d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <HAL_RCC_GetSysClockFreq+0xb4>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d002      	beq.n	8001200 <HAL_RCC_GetSysClockFreq+0x40>
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d003      	beq.n	8001206 <HAL_RCC_GetSysClockFreq+0x46>
 80011fe:	e02d      	b.n	800125c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001202:	623b      	str	r3, [r7, #32]
      break;
 8001204:	e02d      	b.n	8001262 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	0c9b      	lsrs	r3, r3, #18
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001212:	4413      	add	r3, r2
 8001214:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001218:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d013      	beq.n	800124c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	0c5b      	lsrs	r3, r3, #17
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001232:	4413      	add	r3, r2
 8001234:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001238:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <HAL_RCC_GetSysClockFreq+0xb8>)
 800123e:	fb02 f203 	mul.w	r2, r2, r3
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	fbb2 f3f3 	udiv	r3, r2, r3
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
 800124a:	e004      	b.n	8001256 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001250:	fb02 f303 	mul.w	r3, r2, r3
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	623b      	str	r3, [r7, #32]
      break;
 800125a:	e002      	b.n	8001262 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_RCC_GetSysClockFreq+0xb8>)
 800125e:	623b      	str	r3, [r7, #32]
      break;
 8001260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001262:	6a3b      	ldr	r3, [r7, #32]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3728      	adds	r7, #40	; 0x28
 8001268:	46bd      	mov	sp, r7
 800126a:	bc90      	pop	{r4, r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	08001ccc 	.word	0x08001ccc
 8001274:	40021000 	.word	0x40021000
 8001278:	007a1200 	.word	0x007a1200
 800127c:	003d0900 	.word	0x003d0900

08001280 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <RCC_Delay+0x34>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <RCC_Delay+0x38>)
 800128e:	fba2 2303 	umull	r2, r3, r2, r3
 8001292:	0a5b      	lsrs	r3, r3, #9
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	fb02 f303 	mul.w	r3, r2, r3
 800129a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800129c:	bf00      	nop
  }
  while (Delay --);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	1e5a      	subs	r2, r3, #1
 80012a2:	60fa      	str	r2, [r7, #12]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f9      	bne.n	800129c <RCC_Delay+0x1c>
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	20000000 	.word	0x20000000
 80012b8:	10624dd3 	.word	0x10624dd3

080012bc <__errno>:
 80012bc:	4b01      	ldr	r3, [pc, #4]	; (80012c4 <__errno+0x8>)
 80012be:	6818      	ldr	r0, [r3, #0]
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	2000000c 	.word	0x2000000c

080012c8 <__libc_init_array>:
 80012c8:	b570      	push	{r4, r5, r6, lr}
 80012ca:	2600      	movs	r6, #0
 80012cc:	4d0c      	ldr	r5, [pc, #48]	; (8001300 <__libc_init_array+0x38>)
 80012ce:	4c0d      	ldr	r4, [pc, #52]	; (8001304 <__libc_init_array+0x3c>)
 80012d0:	1b64      	subs	r4, r4, r5
 80012d2:	10a4      	asrs	r4, r4, #2
 80012d4:	42a6      	cmp	r6, r4
 80012d6:	d109      	bne.n	80012ec <__libc_init_array+0x24>
 80012d8:	f000 fce4 	bl	8001ca4 <_init>
 80012dc:	2600      	movs	r6, #0
 80012de:	4d0a      	ldr	r5, [pc, #40]	; (8001308 <__libc_init_array+0x40>)
 80012e0:	4c0a      	ldr	r4, [pc, #40]	; (800130c <__libc_init_array+0x44>)
 80012e2:	1b64      	subs	r4, r4, r5
 80012e4:	10a4      	asrs	r4, r4, #2
 80012e6:	42a6      	cmp	r6, r4
 80012e8:	d105      	bne.n	80012f6 <__libc_init_array+0x2e>
 80012ea:	bd70      	pop	{r4, r5, r6, pc}
 80012ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80012f0:	4798      	blx	r3
 80012f2:	3601      	adds	r6, #1
 80012f4:	e7ee      	b.n	80012d4 <__libc_init_array+0xc>
 80012f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80012fa:	4798      	blx	r3
 80012fc:	3601      	adds	r6, #1
 80012fe:	e7f2      	b.n	80012e6 <__libc_init_array+0x1e>
 8001300:	08001d50 	.word	0x08001d50
 8001304:	08001d50 	.word	0x08001d50
 8001308:	08001d50 	.word	0x08001d50
 800130c:	08001d54 	.word	0x08001d54

08001310 <memset>:
 8001310:	4603      	mov	r3, r0
 8001312:	4402      	add	r2, r0
 8001314:	4293      	cmp	r3, r2
 8001316:	d100      	bne.n	800131a <memset+0xa>
 8001318:	4770      	bx	lr
 800131a:	f803 1b01 	strb.w	r1, [r3], #1
 800131e:	e7f9      	b.n	8001314 <memset+0x4>

08001320 <_puts_r>:
 8001320:	b570      	push	{r4, r5, r6, lr}
 8001322:	460e      	mov	r6, r1
 8001324:	4605      	mov	r5, r0
 8001326:	b118      	cbz	r0, 8001330 <_puts_r+0x10>
 8001328:	6983      	ldr	r3, [r0, #24]
 800132a:	b90b      	cbnz	r3, 8001330 <_puts_r+0x10>
 800132c:	f000 fa48 	bl	80017c0 <__sinit>
 8001330:	69ab      	ldr	r3, [r5, #24]
 8001332:	68ac      	ldr	r4, [r5, #8]
 8001334:	b913      	cbnz	r3, 800133c <_puts_r+0x1c>
 8001336:	4628      	mov	r0, r5
 8001338:	f000 fa42 	bl	80017c0 <__sinit>
 800133c:	4b2c      	ldr	r3, [pc, #176]	; (80013f0 <_puts_r+0xd0>)
 800133e:	429c      	cmp	r4, r3
 8001340:	d120      	bne.n	8001384 <_puts_r+0x64>
 8001342:	686c      	ldr	r4, [r5, #4]
 8001344:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001346:	07db      	lsls	r3, r3, #31
 8001348:	d405      	bmi.n	8001356 <_puts_r+0x36>
 800134a:	89a3      	ldrh	r3, [r4, #12]
 800134c:	0598      	lsls	r0, r3, #22
 800134e:	d402      	bmi.n	8001356 <_puts_r+0x36>
 8001350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001352:	f000 fad3 	bl	80018fc <__retarget_lock_acquire_recursive>
 8001356:	89a3      	ldrh	r3, [r4, #12]
 8001358:	0719      	lsls	r1, r3, #28
 800135a:	d51d      	bpl.n	8001398 <_puts_r+0x78>
 800135c:	6923      	ldr	r3, [r4, #16]
 800135e:	b1db      	cbz	r3, 8001398 <_puts_r+0x78>
 8001360:	3e01      	subs	r6, #1
 8001362:	68a3      	ldr	r3, [r4, #8]
 8001364:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001368:	3b01      	subs	r3, #1
 800136a:	60a3      	str	r3, [r4, #8]
 800136c:	bb39      	cbnz	r1, 80013be <_puts_r+0x9e>
 800136e:	2b00      	cmp	r3, #0
 8001370:	da38      	bge.n	80013e4 <_puts_r+0xc4>
 8001372:	4622      	mov	r2, r4
 8001374:	210a      	movs	r1, #10
 8001376:	4628      	mov	r0, r5
 8001378:	f000 f848 	bl	800140c <__swbuf_r>
 800137c:	3001      	adds	r0, #1
 800137e:	d011      	beq.n	80013a4 <_puts_r+0x84>
 8001380:	250a      	movs	r5, #10
 8001382:	e011      	b.n	80013a8 <_puts_r+0x88>
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <_puts_r+0xd4>)
 8001386:	429c      	cmp	r4, r3
 8001388:	d101      	bne.n	800138e <_puts_r+0x6e>
 800138a:	68ac      	ldr	r4, [r5, #8]
 800138c:	e7da      	b.n	8001344 <_puts_r+0x24>
 800138e:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <_puts_r+0xd8>)
 8001390:	429c      	cmp	r4, r3
 8001392:	bf08      	it	eq
 8001394:	68ec      	ldreq	r4, [r5, #12]
 8001396:	e7d5      	b.n	8001344 <_puts_r+0x24>
 8001398:	4621      	mov	r1, r4
 800139a:	4628      	mov	r0, r5
 800139c:	f000 f888 	bl	80014b0 <__swsetup_r>
 80013a0:	2800      	cmp	r0, #0
 80013a2:	d0dd      	beq.n	8001360 <_puts_r+0x40>
 80013a4:	f04f 35ff 	mov.w	r5, #4294967295
 80013a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013aa:	07da      	lsls	r2, r3, #31
 80013ac:	d405      	bmi.n	80013ba <_puts_r+0x9a>
 80013ae:	89a3      	ldrh	r3, [r4, #12]
 80013b0:	059b      	lsls	r3, r3, #22
 80013b2:	d402      	bmi.n	80013ba <_puts_r+0x9a>
 80013b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013b6:	f000 faa2 	bl	80018fe <__retarget_lock_release_recursive>
 80013ba:	4628      	mov	r0, r5
 80013bc:	bd70      	pop	{r4, r5, r6, pc}
 80013be:	2b00      	cmp	r3, #0
 80013c0:	da04      	bge.n	80013cc <_puts_r+0xac>
 80013c2:	69a2      	ldr	r2, [r4, #24]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	dc06      	bgt.n	80013d6 <_puts_r+0xb6>
 80013c8:	290a      	cmp	r1, #10
 80013ca:	d004      	beq.n	80013d6 <_puts_r+0xb6>
 80013cc:	6823      	ldr	r3, [r4, #0]
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	6022      	str	r2, [r4, #0]
 80013d2:	7019      	strb	r1, [r3, #0]
 80013d4:	e7c5      	b.n	8001362 <_puts_r+0x42>
 80013d6:	4622      	mov	r2, r4
 80013d8:	4628      	mov	r0, r5
 80013da:	f000 f817 	bl	800140c <__swbuf_r>
 80013de:	3001      	adds	r0, #1
 80013e0:	d1bf      	bne.n	8001362 <_puts_r+0x42>
 80013e2:	e7df      	b.n	80013a4 <_puts_r+0x84>
 80013e4:	250a      	movs	r5, #10
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	6022      	str	r2, [r4, #0]
 80013ec:	701d      	strb	r5, [r3, #0]
 80013ee:	e7db      	b.n	80013a8 <_puts_r+0x88>
 80013f0:	08001d10 	.word	0x08001d10
 80013f4:	08001d30 	.word	0x08001d30
 80013f8:	08001cf0 	.word	0x08001cf0

080013fc <puts>:
 80013fc:	4b02      	ldr	r3, [pc, #8]	; (8001408 <puts+0xc>)
 80013fe:	4601      	mov	r1, r0
 8001400:	6818      	ldr	r0, [r3, #0]
 8001402:	f7ff bf8d 	b.w	8001320 <_puts_r>
 8001406:	bf00      	nop
 8001408:	2000000c 	.word	0x2000000c

0800140c <__swbuf_r>:
 800140c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800140e:	460e      	mov	r6, r1
 8001410:	4614      	mov	r4, r2
 8001412:	4605      	mov	r5, r0
 8001414:	b118      	cbz	r0, 800141e <__swbuf_r+0x12>
 8001416:	6983      	ldr	r3, [r0, #24]
 8001418:	b90b      	cbnz	r3, 800141e <__swbuf_r+0x12>
 800141a:	f000 f9d1 	bl	80017c0 <__sinit>
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <__swbuf_r+0x98>)
 8001420:	429c      	cmp	r4, r3
 8001422:	d12b      	bne.n	800147c <__swbuf_r+0x70>
 8001424:	686c      	ldr	r4, [r5, #4]
 8001426:	69a3      	ldr	r3, [r4, #24]
 8001428:	60a3      	str	r3, [r4, #8]
 800142a:	89a3      	ldrh	r3, [r4, #12]
 800142c:	071a      	lsls	r2, r3, #28
 800142e:	d52f      	bpl.n	8001490 <__swbuf_r+0x84>
 8001430:	6923      	ldr	r3, [r4, #16]
 8001432:	b36b      	cbz	r3, 8001490 <__swbuf_r+0x84>
 8001434:	6923      	ldr	r3, [r4, #16]
 8001436:	6820      	ldr	r0, [r4, #0]
 8001438:	b2f6      	uxtb	r6, r6
 800143a:	1ac0      	subs	r0, r0, r3
 800143c:	6963      	ldr	r3, [r4, #20]
 800143e:	4637      	mov	r7, r6
 8001440:	4283      	cmp	r3, r0
 8001442:	dc04      	bgt.n	800144e <__swbuf_r+0x42>
 8001444:	4621      	mov	r1, r4
 8001446:	4628      	mov	r0, r5
 8001448:	f000 f926 	bl	8001698 <_fflush_r>
 800144c:	bb30      	cbnz	r0, 800149c <__swbuf_r+0x90>
 800144e:	68a3      	ldr	r3, [r4, #8]
 8001450:	3001      	adds	r0, #1
 8001452:	3b01      	subs	r3, #1
 8001454:	60a3      	str	r3, [r4, #8]
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	6022      	str	r2, [r4, #0]
 800145c:	701e      	strb	r6, [r3, #0]
 800145e:	6963      	ldr	r3, [r4, #20]
 8001460:	4283      	cmp	r3, r0
 8001462:	d004      	beq.n	800146e <__swbuf_r+0x62>
 8001464:	89a3      	ldrh	r3, [r4, #12]
 8001466:	07db      	lsls	r3, r3, #31
 8001468:	d506      	bpl.n	8001478 <__swbuf_r+0x6c>
 800146a:	2e0a      	cmp	r6, #10
 800146c:	d104      	bne.n	8001478 <__swbuf_r+0x6c>
 800146e:	4621      	mov	r1, r4
 8001470:	4628      	mov	r0, r5
 8001472:	f000 f911 	bl	8001698 <_fflush_r>
 8001476:	b988      	cbnz	r0, 800149c <__swbuf_r+0x90>
 8001478:	4638      	mov	r0, r7
 800147a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <__swbuf_r+0x9c>)
 800147e:	429c      	cmp	r4, r3
 8001480:	d101      	bne.n	8001486 <__swbuf_r+0x7a>
 8001482:	68ac      	ldr	r4, [r5, #8]
 8001484:	e7cf      	b.n	8001426 <__swbuf_r+0x1a>
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <__swbuf_r+0xa0>)
 8001488:	429c      	cmp	r4, r3
 800148a:	bf08      	it	eq
 800148c:	68ec      	ldreq	r4, [r5, #12]
 800148e:	e7ca      	b.n	8001426 <__swbuf_r+0x1a>
 8001490:	4621      	mov	r1, r4
 8001492:	4628      	mov	r0, r5
 8001494:	f000 f80c 	bl	80014b0 <__swsetup_r>
 8001498:	2800      	cmp	r0, #0
 800149a:	d0cb      	beq.n	8001434 <__swbuf_r+0x28>
 800149c:	f04f 37ff 	mov.w	r7, #4294967295
 80014a0:	e7ea      	b.n	8001478 <__swbuf_r+0x6c>
 80014a2:	bf00      	nop
 80014a4:	08001d10 	.word	0x08001d10
 80014a8:	08001d30 	.word	0x08001d30
 80014ac:	08001cf0 	.word	0x08001cf0

080014b0 <__swsetup_r>:
 80014b0:	4b32      	ldr	r3, [pc, #200]	; (800157c <__swsetup_r+0xcc>)
 80014b2:	b570      	push	{r4, r5, r6, lr}
 80014b4:	681d      	ldr	r5, [r3, #0]
 80014b6:	4606      	mov	r6, r0
 80014b8:	460c      	mov	r4, r1
 80014ba:	b125      	cbz	r5, 80014c6 <__swsetup_r+0x16>
 80014bc:	69ab      	ldr	r3, [r5, #24]
 80014be:	b913      	cbnz	r3, 80014c6 <__swsetup_r+0x16>
 80014c0:	4628      	mov	r0, r5
 80014c2:	f000 f97d 	bl	80017c0 <__sinit>
 80014c6:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <__swsetup_r+0xd0>)
 80014c8:	429c      	cmp	r4, r3
 80014ca:	d10f      	bne.n	80014ec <__swsetup_r+0x3c>
 80014cc:	686c      	ldr	r4, [r5, #4]
 80014ce:	89a3      	ldrh	r3, [r4, #12]
 80014d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014d4:	0719      	lsls	r1, r3, #28
 80014d6:	d42c      	bmi.n	8001532 <__swsetup_r+0x82>
 80014d8:	06dd      	lsls	r5, r3, #27
 80014da:	d411      	bmi.n	8001500 <__swsetup_r+0x50>
 80014dc:	2309      	movs	r3, #9
 80014de:	6033      	str	r3, [r6, #0]
 80014e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	81a3      	strh	r3, [r4, #12]
 80014ea:	e03e      	b.n	800156a <__swsetup_r+0xba>
 80014ec:	4b25      	ldr	r3, [pc, #148]	; (8001584 <__swsetup_r+0xd4>)
 80014ee:	429c      	cmp	r4, r3
 80014f0:	d101      	bne.n	80014f6 <__swsetup_r+0x46>
 80014f2:	68ac      	ldr	r4, [r5, #8]
 80014f4:	e7eb      	b.n	80014ce <__swsetup_r+0x1e>
 80014f6:	4b24      	ldr	r3, [pc, #144]	; (8001588 <__swsetup_r+0xd8>)
 80014f8:	429c      	cmp	r4, r3
 80014fa:	bf08      	it	eq
 80014fc:	68ec      	ldreq	r4, [r5, #12]
 80014fe:	e7e6      	b.n	80014ce <__swsetup_r+0x1e>
 8001500:	0758      	lsls	r0, r3, #29
 8001502:	d512      	bpl.n	800152a <__swsetup_r+0x7a>
 8001504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001506:	b141      	cbz	r1, 800151a <__swsetup_r+0x6a>
 8001508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800150c:	4299      	cmp	r1, r3
 800150e:	d002      	beq.n	8001516 <__swsetup_r+0x66>
 8001510:	4630      	mov	r0, r6
 8001512:	f000 fa59 	bl	80019c8 <_free_r>
 8001516:	2300      	movs	r3, #0
 8001518:	6363      	str	r3, [r4, #52]	; 0x34
 800151a:	89a3      	ldrh	r3, [r4, #12]
 800151c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001520:	81a3      	strh	r3, [r4, #12]
 8001522:	2300      	movs	r3, #0
 8001524:	6063      	str	r3, [r4, #4]
 8001526:	6923      	ldr	r3, [r4, #16]
 8001528:	6023      	str	r3, [r4, #0]
 800152a:	89a3      	ldrh	r3, [r4, #12]
 800152c:	f043 0308 	orr.w	r3, r3, #8
 8001530:	81a3      	strh	r3, [r4, #12]
 8001532:	6923      	ldr	r3, [r4, #16]
 8001534:	b94b      	cbnz	r3, 800154a <__swsetup_r+0x9a>
 8001536:	89a3      	ldrh	r3, [r4, #12]
 8001538:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800153c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001540:	d003      	beq.n	800154a <__swsetup_r+0x9a>
 8001542:	4621      	mov	r1, r4
 8001544:	4630      	mov	r0, r6
 8001546:	f000 f9ff 	bl	8001948 <__smakebuf_r>
 800154a:	89a0      	ldrh	r0, [r4, #12]
 800154c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001550:	f010 0301 	ands.w	r3, r0, #1
 8001554:	d00a      	beq.n	800156c <__swsetup_r+0xbc>
 8001556:	2300      	movs	r3, #0
 8001558:	60a3      	str	r3, [r4, #8]
 800155a:	6963      	ldr	r3, [r4, #20]
 800155c:	425b      	negs	r3, r3
 800155e:	61a3      	str	r3, [r4, #24]
 8001560:	6923      	ldr	r3, [r4, #16]
 8001562:	b943      	cbnz	r3, 8001576 <__swsetup_r+0xc6>
 8001564:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001568:	d1ba      	bne.n	80014e0 <__swsetup_r+0x30>
 800156a:	bd70      	pop	{r4, r5, r6, pc}
 800156c:	0781      	lsls	r1, r0, #30
 800156e:	bf58      	it	pl
 8001570:	6963      	ldrpl	r3, [r4, #20]
 8001572:	60a3      	str	r3, [r4, #8]
 8001574:	e7f4      	b.n	8001560 <__swsetup_r+0xb0>
 8001576:	2000      	movs	r0, #0
 8001578:	e7f7      	b.n	800156a <__swsetup_r+0xba>
 800157a:	bf00      	nop
 800157c:	2000000c 	.word	0x2000000c
 8001580:	08001d10 	.word	0x08001d10
 8001584:	08001d30 	.word	0x08001d30
 8001588:	08001cf0 	.word	0x08001cf0

0800158c <__sflush_r>:
 800158c:	898a      	ldrh	r2, [r1, #12]
 800158e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001592:	4605      	mov	r5, r0
 8001594:	0710      	lsls	r0, r2, #28
 8001596:	460c      	mov	r4, r1
 8001598:	d458      	bmi.n	800164c <__sflush_r+0xc0>
 800159a:	684b      	ldr	r3, [r1, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	dc05      	bgt.n	80015ac <__sflush_r+0x20>
 80015a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	dc02      	bgt.n	80015ac <__sflush_r+0x20>
 80015a6:	2000      	movs	r0, #0
 80015a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015ae:	2e00      	cmp	r6, #0
 80015b0:	d0f9      	beq.n	80015a6 <__sflush_r+0x1a>
 80015b2:	2300      	movs	r3, #0
 80015b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80015b8:	682f      	ldr	r7, [r5, #0]
 80015ba:	602b      	str	r3, [r5, #0]
 80015bc:	d032      	beq.n	8001624 <__sflush_r+0x98>
 80015be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80015c0:	89a3      	ldrh	r3, [r4, #12]
 80015c2:	075a      	lsls	r2, r3, #29
 80015c4:	d505      	bpl.n	80015d2 <__sflush_r+0x46>
 80015c6:	6863      	ldr	r3, [r4, #4]
 80015c8:	1ac0      	subs	r0, r0, r3
 80015ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80015cc:	b10b      	cbz	r3, 80015d2 <__sflush_r+0x46>
 80015ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015d0:	1ac0      	subs	r0, r0, r3
 80015d2:	2300      	movs	r3, #0
 80015d4:	4602      	mov	r2, r0
 80015d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015d8:	4628      	mov	r0, r5
 80015da:	6a21      	ldr	r1, [r4, #32]
 80015dc:	47b0      	blx	r6
 80015de:	1c43      	adds	r3, r0, #1
 80015e0:	89a3      	ldrh	r3, [r4, #12]
 80015e2:	d106      	bne.n	80015f2 <__sflush_r+0x66>
 80015e4:	6829      	ldr	r1, [r5, #0]
 80015e6:	291d      	cmp	r1, #29
 80015e8:	d82c      	bhi.n	8001644 <__sflush_r+0xb8>
 80015ea:	4a2a      	ldr	r2, [pc, #168]	; (8001694 <__sflush_r+0x108>)
 80015ec:	40ca      	lsrs	r2, r1
 80015ee:	07d6      	lsls	r6, r2, #31
 80015f0:	d528      	bpl.n	8001644 <__sflush_r+0xb8>
 80015f2:	2200      	movs	r2, #0
 80015f4:	6062      	str	r2, [r4, #4]
 80015f6:	6922      	ldr	r2, [r4, #16]
 80015f8:	04d9      	lsls	r1, r3, #19
 80015fa:	6022      	str	r2, [r4, #0]
 80015fc:	d504      	bpl.n	8001608 <__sflush_r+0x7c>
 80015fe:	1c42      	adds	r2, r0, #1
 8001600:	d101      	bne.n	8001606 <__sflush_r+0x7a>
 8001602:	682b      	ldr	r3, [r5, #0]
 8001604:	b903      	cbnz	r3, 8001608 <__sflush_r+0x7c>
 8001606:	6560      	str	r0, [r4, #84]	; 0x54
 8001608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800160a:	602f      	str	r7, [r5, #0]
 800160c:	2900      	cmp	r1, #0
 800160e:	d0ca      	beq.n	80015a6 <__sflush_r+0x1a>
 8001610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001614:	4299      	cmp	r1, r3
 8001616:	d002      	beq.n	800161e <__sflush_r+0x92>
 8001618:	4628      	mov	r0, r5
 800161a:	f000 f9d5 	bl	80019c8 <_free_r>
 800161e:	2000      	movs	r0, #0
 8001620:	6360      	str	r0, [r4, #52]	; 0x34
 8001622:	e7c1      	b.n	80015a8 <__sflush_r+0x1c>
 8001624:	6a21      	ldr	r1, [r4, #32]
 8001626:	2301      	movs	r3, #1
 8001628:	4628      	mov	r0, r5
 800162a:	47b0      	blx	r6
 800162c:	1c41      	adds	r1, r0, #1
 800162e:	d1c7      	bne.n	80015c0 <__sflush_r+0x34>
 8001630:	682b      	ldr	r3, [r5, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0c4      	beq.n	80015c0 <__sflush_r+0x34>
 8001636:	2b1d      	cmp	r3, #29
 8001638:	d001      	beq.n	800163e <__sflush_r+0xb2>
 800163a:	2b16      	cmp	r3, #22
 800163c:	d101      	bne.n	8001642 <__sflush_r+0xb6>
 800163e:	602f      	str	r7, [r5, #0]
 8001640:	e7b1      	b.n	80015a6 <__sflush_r+0x1a>
 8001642:	89a3      	ldrh	r3, [r4, #12]
 8001644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001648:	81a3      	strh	r3, [r4, #12]
 800164a:	e7ad      	b.n	80015a8 <__sflush_r+0x1c>
 800164c:	690f      	ldr	r7, [r1, #16]
 800164e:	2f00      	cmp	r7, #0
 8001650:	d0a9      	beq.n	80015a6 <__sflush_r+0x1a>
 8001652:	0793      	lsls	r3, r2, #30
 8001654:	bf18      	it	ne
 8001656:	2300      	movne	r3, #0
 8001658:	680e      	ldr	r6, [r1, #0]
 800165a:	bf08      	it	eq
 800165c:	694b      	ldreq	r3, [r1, #20]
 800165e:	eba6 0807 	sub.w	r8, r6, r7
 8001662:	600f      	str	r7, [r1, #0]
 8001664:	608b      	str	r3, [r1, #8]
 8001666:	f1b8 0f00 	cmp.w	r8, #0
 800166a:	dd9c      	ble.n	80015a6 <__sflush_r+0x1a>
 800166c:	4643      	mov	r3, r8
 800166e:	463a      	mov	r2, r7
 8001670:	4628      	mov	r0, r5
 8001672:	6a21      	ldr	r1, [r4, #32]
 8001674:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001676:	47b0      	blx	r6
 8001678:	2800      	cmp	r0, #0
 800167a:	dc06      	bgt.n	800168a <__sflush_r+0xfe>
 800167c:	89a3      	ldrh	r3, [r4, #12]
 800167e:	f04f 30ff 	mov.w	r0, #4294967295
 8001682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001686:	81a3      	strh	r3, [r4, #12]
 8001688:	e78e      	b.n	80015a8 <__sflush_r+0x1c>
 800168a:	4407      	add	r7, r0
 800168c:	eba8 0800 	sub.w	r8, r8, r0
 8001690:	e7e9      	b.n	8001666 <__sflush_r+0xda>
 8001692:	bf00      	nop
 8001694:	20400001 	.word	0x20400001

08001698 <_fflush_r>:
 8001698:	b538      	push	{r3, r4, r5, lr}
 800169a:	690b      	ldr	r3, [r1, #16]
 800169c:	4605      	mov	r5, r0
 800169e:	460c      	mov	r4, r1
 80016a0:	b913      	cbnz	r3, 80016a8 <_fflush_r+0x10>
 80016a2:	2500      	movs	r5, #0
 80016a4:	4628      	mov	r0, r5
 80016a6:	bd38      	pop	{r3, r4, r5, pc}
 80016a8:	b118      	cbz	r0, 80016b2 <_fflush_r+0x1a>
 80016aa:	6983      	ldr	r3, [r0, #24]
 80016ac:	b90b      	cbnz	r3, 80016b2 <_fflush_r+0x1a>
 80016ae:	f000 f887 	bl	80017c0 <__sinit>
 80016b2:	4b14      	ldr	r3, [pc, #80]	; (8001704 <_fflush_r+0x6c>)
 80016b4:	429c      	cmp	r4, r3
 80016b6:	d11b      	bne.n	80016f0 <_fflush_r+0x58>
 80016b8:	686c      	ldr	r4, [r5, #4]
 80016ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0ef      	beq.n	80016a2 <_fflush_r+0xa>
 80016c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80016c4:	07d0      	lsls	r0, r2, #31
 80016c6:	d404      	bmi.n	80016d2 <_fflush_r+0x3a>
 80016c8:	0599      	lsls	r1, r3, #22
 80016ca:	d402      	bmi.n	80016d2 <_fflush_r+0x3a>
 80016cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016ce:	f000 f915 	bl	80018fc <__retarget_lock_acquire_recursive>
 80016d2:	4628      	mov	r0, r5
 80016d4:	4621      	mov	r1, r4
 80016d6:	f7ff ff59 	bl	800158c <__sflush_r>
 80016da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016dc:	4605      	mov	r5, r0
 80016de:	07da      	lsls	r2, r3, #31
 80016e0:	d4e0      	bmi.n	80016a4 <_fflush_r+0xc>
 80016e2:	89a3      	ldrh	r3, [r4, #12]
 80016e4:	059b      	lsls	r3, r3, #22
 80016e6:	d4dd      	bmi.n	80016a4 <_fflush_r+0xc>
 80016e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016ea:	f000 f908 	bl	80018fe <__retarget_lock_release_recursive>
 80016ee:	e7d9      	b.n	80016a4 <_fflush_r+0xc>
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <_fflush_r+0x70>)
 80016f2:	429c      	cmp	r4, r3
 80016f4:	d101      	bne.n	80016fa <_fflush_r+0x62>
 80016f6:	68ac      	ldr	r4, [r5, #8]
 80016f8:	e7df      	b.n	80016ba <_fflush_r+0x22>
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <_fflush_r+0x74>)
 80016fc:	429c      	cmp	r4, r3
 80016fe:	bf08      	it	eq
 8001700:	68ec      	ldreq	r4, [r5, #12]
 8001702:	e7da      	b.n	80016ba <_fflush_r+0x22>
 8001704:	08001d10 	.word	0x08001d10
 8001708:	08001d30 	.word	0x08001d30
 800170c:	08001cf0 	.word	0x08001cf0

08001710 <std>:
 8001710:	2300      	movs	r3, #0
 8001712:	b510      	push	{r4, lr}
 8001714:	4604      	mov	r4, r0
 8001716:	e9c0 3300 	strd	r3, r3, [r0]
 800171a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800171e:	6083      	str	r3, [r0, #8]
 8001720:	8181      	strh	r1, [r0, #12]
 8001722:	6643      	str	r3, [r0, #100]	; 0x64
 8001724:	81c2      	strh	r2, [r0, #14]
 8001726:	6183      	str	r3, [r0, #24]
 8001728:	4619      	mov	r1, r3
 800172a:	2208      	movs	r2, #8
 800172c:	305c      	adds	r0, #92	; 0x5c
 800172e:	f7ff fdef 	bl	8001310 <memset>
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <std+0x38>)
 8001734:	6224      	str	r4, [r4, #32]
 8001736:	6263      	str	r3, [r4, #36]	; 0x24
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <std+0x3c>)
 800173a:	62a3      	str	r3, [r4, #40]	; 0x28
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <std+0x40>)
 800173e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <std+0x44>)
 8001742:	6323      	str	r3, [r4, #48]	; 0x30
 8001744:	bd10      	pop	{r4, pc}
 8001746:	bf00      	nop
 8001748:	08001b35 	.word	0x08001b35
 800174c:	08001b57 	.word	0x08001b57
 8001750:	08001b8f 	.word	0x08001b8f
 8001754:	08001bb3 	.word	0x08001bb3

08001758 <_cleanup_r>:
 8001758:	4901      	ldr	r1, [pc, #4]	; (8001760 <_cleanup_r+0x8>)
 800175a:	f000 b8af 	b.w	80018bc <_fwalk_reent>
 800175e:	bf00      	nop
 8001760:	08001699 	.word	0x08001699

08001764 <__sfmoreglue>:
 8001764:	b570      	push	{r4, r5, r6, lr}
 8001766:	2568      	movs	r5, #104	; 0x68
 8001768:	1e4a      	subs	r2, r1, #1
 800176a:	4355      	muls	r5, r2
 800176c:	460e      	mov	r6, r1
 800176e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001772:	f000 f975 	bl	8001a60 <_malloc_r>
 8001776:	4604      	mov	r4, r0
 8001778:	b140      	cbz	r0, 800178c <__sfmoreglue+0x28>
 800177a:	2100      	movs	r1, #0
 800177c:	e9c0 1600 	strd	r1, r6, [r0]
 8001780:	300c      	adds	r0, #12
 8001782:	60a0      	str	r0, [r4, #8]
 8001784:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001788:	f7ff fdc2 	bl	8001310 <memset>
 800178c:	4620      	mov	r0, r4
 800178e:	bd70      	pop	{r4, r5, r6, pc}

08001790 <__sfp_lock_acquire>:
 8001790:	4801      	ldr	r0, [pc, #4]	; (8001798 <__sfp_lock_acquire+0x8>)
 8001792:	f000 b8b3 	b.w	80018fc <__retarget_lock_acquire_recursive>
 8001796:	bf00      	nop
 8001798:	200000a4 	.word	0x200000a4

0800179c <__sfp_lock_release>:
 800179c:	4801      	ldr	r0, [pc, #4]	; (80017a4 <__sfp_lock_release+0x8>)
 800179e:	f000 b8ae 	b.w	80018fe <__retarget_lock_release_recursive>
 80017a2:	bf00      	nop
 80017a4:	200000a4 	.word	0x200000a4

080017a8 <__sinit_lock_acquire>:
 80017a8:	4801      	ldr	r0, [pc, #4]	; (80017b0 <__sinit_lock_acquire+0x8>)
 80017aa:	f000 b8a7 	b.w	80018fc <__retarget_lock_acquire_recursive>
 80017ae:	bf00      	nop
 80017b0:	2000009f 	.word	0x2000009f

080017b4 <__sinit_lock_release>:
 80017b4:	4801      	ldr	r0, [pc, #4]	; (80017bc <__sinit_lock_release+0x8>)
 80017b6:	f000 b8a2 	b.w	80018fe <__retarget_lock_release_recursive>
 80017ba:	bf00      	nop
 80017bc:	2000009f 	.word	0x2000009f

080017c0 <__sinit>:
 80017c0:	b510      	push	{r4, lr}
 80017c2:	4604      	mov	r4, r0
 80017c4:	f7ff fff0 	bl	80017a8 <__sinit_lock_acquire>
 80017c8:	69a3      	ldr	r3, [r4, #24]
 80017ca:	b11b      	cbz	r3, 80017d4 <__sinit+0x14>
 80017cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017d0:	f7ff bff0 	b.w	80017b4 <__sinit_lock_release>
 80017d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80017d8:	6523      	str	r3, [r4, #80]	; 0x50
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <__sinit+0x68>)
 80017dc:	4a13      	ldr	r2, [pc, #76]	; (800182c <__sinit+0x6c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80017e2:	42a3      	cmp	r3, r4
 80017e4:	bf08      	it	eq
 80017e6:	2301      	moveq	r3, #1
 80017e8:	4620      	mov	r0, r4
 80017ea:	bf08      	it	eq
 80017ec:	61a3      	streq	r3, [r4, #24]
 80017ee:	f000 f81f 	bl	8001830 <__sfp>
 80017f2:	6060      	str	r0, [r4, #4]
 80017f4:	4620      	mov	r0, r4
 80017f6:	f000 f81b 	bl	8001830 <__sfp>
 80017fa:	60a0      	str	r0, [r4, #8]
 80017fc:	4620      	mov	r0, r4
 80017fe:	f000 f817 	bl	8001830 <__sfp>
 8001802:	2200      	movs	r2, #0
 8001804:	2104      	movs	r1, #4
 8001806:	60e0      	str	r0, [r4, #12]
 8001808:	6860      	ldr	r0, [r4, #4]
 800180a:	f7ff ff81 	bl	8001710 <std>
 800180e:	2201      	movs	r2, #1
 8001810:	2109      	movs	r1, #9
 8001812:	68a0      	ldr	r0, [r4, #8]
 8001814:	f7ff ff7c 	bl	8001710 <std>
 8001818:	2202      	movs	r2, #2
 800181a:	2112      	movs	r1, #18
 800181c:	68e0      	ldr	r0, [r4, #12]
 800181e:	f7ff ff77 	bl	8001710 <std>
 8001822:	2301      	movs	r3, #1
 8001824:	61a3      	str	r3, [r4, #24]
 8001826:	e7d1      	b.n	80017cc <__sinit+0xc>
 8001828:	08001cec 	.word	0x08001cec
 800182c:	08001759 	.word	0x08001759

08001830 <__sfp>:
 8001830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001832:	4607      	mov	r7, r0
 8001834:	f7ff ffac 	bl	8001790 <__sfp_lock_acquire>
 8001838:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <__sfp+0x84>)
 800183a:	681e      	ldr	r6, [r3, #0]
 800183c:	69b3      	ldr	r3, [r6, #24]
 800183e:	b913      	cbnz	r3, 8001846 <__sfp+0x16>
 8001840:	4630      	mov	r0, r6
 8001842:	f7ff ffbd 	bl	80017c0 <__sinit>
 8001846:	3648      	adds	r6, #72	; 0x48
 8001848:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800184c:	3b01      	subs	r3, #1
 800184e:	d503      	bpl.n	8001858 <__sfp+0x28>
 8001850:	6833      	ldr	r3, [r6, #0]
 8001852:	b30b      	cbz	r3, 8001898 <__sfp+0x68>
 8001854:	6836      	ldr	r6, [r6, #0]
 8001856:	e7f7      	b.n	8001848 <__sfp+0x18>
 8001858:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800185c:	b9d5      	cbnz	r5, 8001894 <__sfp+0x64>
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <__sfp+0x88>)
 8001860:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001864:	60e3      	str	r3, [r4, #12]
 8001866:	6665      	str	r5, [r4, #100]	; 0x64
 8001868:	f000 f847 	bl	80018fa <__retarget_lock_init_recursive>
 800186c:	f7ff ff96 	bl	800179c <__sfp_lock_release>
 8001870:	2208      	movs	r2, #8
 8001872:	4629      	mov	r1, r5
 8001874:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001878:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800187c:	6025      	str	r5, [r4, #0]
 800187e:	61a5      	str	r5, [r4, #24]
 8001880:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001884:	f7ff fd44 	bl	8001310 <memset>
 8001888:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800188c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001890:	4620      	mov	r0, r4
 8001892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001894:	3468      	adds	r4, #104	; 0x68
 8001896:	e7d9      	b.n	800184c <__sfp+0x1c>
 8001898:	2104      	movs	r1, #4
 800189a:	4638      	mov	r0, r7
 800189c:	f7ff ff62 	bl	8001764 <__sfmoreglue>
 80018a0:	4604      	mov	r4, r0
 80018a2:	6030      	str	r0, [r6, #0]
 80018a4:	2800      	cmp	r0, #0
 80018a6:	d1d5      	bne.n	8001854 <__sfp+0x24>
 80018a8:	f7ff ff78 	bl	800179c <__sfp_lock_release>
 80018ac:	230c      	movs	r3, #12
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	e7ee      	b.n	8001890 <__sfp+0x60>
 80018b2:	bf00      	nop
 80018b4:	08001cec 	.word	0x08001cec
 80018b8:	ffff0001 	.word	0xffff0001

080018bc <_fwalk_reent>:
 80018bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018c0:	4606      	mov	r6, r0
 80018c2:	4688      	mov	r8, r1
 80018c4:	2700      	movs	r7, #0
 80018c6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80018ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80018ce:	f1b9 0901 	subs.w	r9, r9, #1
 80018d2:	d505      	bpl.n	80018e0 <_fwalk_reent+0x24>
 80018d4:	6824      	ldr	r4, [r4, #0]
 80018d6:	2c00      	cmp	r4, #0
 80018d8:	d1f7      	bne.n	80018ca <_fwalk_reent+0xe>
 80018da:	4638      	mov	r0, r7
 80018dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018e0:	89ab      	ldrh	r3, [r5, #12]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d907      	bls.n	80018f6 <_fwalk_reent+0x3a>
 80018e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80018ea:	3301      	adds	r3, #1
 80018ec:	d003      	beq.n	80018f6 <_fwalk_reent+0x3a>
 80018ee:	4629      	mov	r1, r5
 80018f0:	4630      	mov	r0, r6
 80018f2:	47c0      	blx	r8
 80018f4:	4307      	orrs	r7, r0
 80018f6:	3568      	adds	r5, #104	; 0x68
 80018f8:	e7e9      	b.n	80018ce <_fwalk_reent+0x12>

080018fa <__retarget_lock_init_recursive>:
 80018fa:	4770      	bx	lr

080018fc <__retarget_lock_acquire_recursive>:
 80018fc:	4770      	bx	lr

080018fe <__retarget_lock_release_recursive>:
 80018fe:	4770      	bx	lr

08001900 <__swhatbuf_r>:
 8001900:	b570      	push	{r4, r5, r6, lr}
 8001902:	460e      	mov	r6, r1
 8001904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001908:	4614      	mov	r4, r2
 800190a:	2900      	cmp	r1, #0
 800190c:	461d      	mov	r5, r3
 800190e:	b096      	sub	sp, #88	; 0x58
 8001910:	da07      	bge.n	8001922 <__swhatbuf_r+0x22>
 8001912:	2300      	movs	r3, #0
 8001914:	602b      	str	r3, [r5, #0]
 8001916:	89b3      	ldrh	r3, [r6, #12]
 8001918:	061a      	lsls	r2, r3, #24
 800191a:	d410      	bmi.n	800193e <__swhatbuf_r+0x3e>
 800191c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001920:	e00e      	b.n	8001940 <__swhatbuf_r+0x40>
 8001922:	466a      	mov	r2, sp
 8001924:	f000 f96c 	bl	8001c00 <_fstat_r>
 8001928:	2800      	cmp	r0, #0
 800192a:	dbf2      	blt.n	8001912 <__swhatbuf_r+0x12>
 800192c:	9a01      	ldr	r2, [sp, #4]
 800192e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001932:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001936:	425a      	negs	r2, r3
 8001938:	415a      	adcs	r2, r3
 800193a:	602a      	str	r2, [r5, #0]
 800193c:	e7ee      	b.n	800191c <__swhatbuf_r+0x1c>
 800193e:	2340      	movs	r3, #64	; 0x40
 8001940:	2000      	movs	r0, #0
 8001942:	6023      	str	r3, [r4, #0]
 8001944:	b016      	add	sp, #88	; 0x58
 8001946:	bd70      	pop	{r4, r5, r6, pc}

08001948 <__smakebuf_r>:
 8001948:	898b      	ldrh	r3, [r1, #12]
 800194a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800194c:	079d      	lsls	r5, r3, #30
 800194e:	4606      	mov	r6, r0
 8001950:	460c      	mov	r4, r1
 8001952:	d507      	bpl.n	8001964 <__smakebuf_r+0x1c>
 8001954:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001958:	6023      	str	r3, [r4, #0]
 800195a:	6123      	str	r3, [r4, #16]
 800195c:	2301      	movs	r3, #1
 800195e:	6163      	str	r3, [r4, #20]
 8001960:	b002      	add	sp, #8
 8001962:	bd70      	pop	{r4, r5, r6, pc}
 8001964:	466a      	mov	r2, sp
 8001966:	ab01      	add	r3, sp, #4
 8001968:	f7ff ffca 	bl	8001900 <__swhatbuf_r>
 800196c:	9900      	ldr	r1, [sp, #0]
 800196e:	4605      	mov	r5, r0
 8001970:	4630      	mov	r0, r6
 8001972:	f000 f875 	bl	8001a60 <_malloc_r>
 8001976:	b948      	cbnz	r0, 800198c <__smakebuf_r+0x44>
 8001978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800197c:	059a      	lsls	r2, r3, #22
 800197e:	d4ef      	bmi.n	8001960 <__smakebuf_r+0x18>
 8001980:	f023 0303 	bic.w	r3, r3, #3
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	81a3      	strh	r3, [r4, #12]
 800198a:	e7e3      	b.n	8001954 <__smakebuf_r+0xc>
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <__smakebuf_r+0x7c>)
 800198e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001990:	89a3      	ldrh	r3, [r4, #12]
 8001992:	6020      	str	r0, [r4, #0]
 8001994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001998:	81a3      	strh	r3, [r4, #12]
 800199a:	9b00      	ldr	r3, [sp, #0]
 800199c:	6120      	str	r0, [r4, #16]
 800199e:	6163      	str	r3, [r4, #20]
 80019a0:	9b01      	ldr	r3, [sp, #4]
 80019a2:	b15b      	cbz	r3, 80019bc <__smakebuf_r+0x74>
 80019a4:	4630      	mov	r0, r6
 80019a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019aa:	f000 f93b 	bl	8001c24 <_isatty_r>
 80019ae:	b128      	cbz	r0, 80019bc <__smakebuf_r+0x74>
 80019b0:	89a3      	ldrh	r3, [r4, #12]
 80019b2:	f023 0303 	bic.w	r3, r3, #3
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	81a3      	strh	r3, [r4, #12]
 80019bc:	89a0      	ldrh	r0, [r4, #12]
 80019be:	4305      	orrs	r5, r0
 80019c0:	81a5      	strh	r5, [r4, #12]
 80019c2:	e7cd      	b.n	8001960 <__smakebuf_r+0x18>
 80019c4:	08001759 	.word	0x08001759

080019c8 <_free_r>:
 80019c8:	b538      	push	{r3, r4, r5, lr}
 80019ca:	4605      	mov	r5, r0
 80019cc:	2900      	cmp	r1, #0
 80019ce:	d043      	beq.n	8001a58 <_free_r+0x90>
 80019d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019d4:	1f0c      	subs	r4, r1, #4
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	bfb8      	it	lt
 80019da:	18e4      	addlt	r4, r4, r3
 80019dc:	f000 f944 	bl	8001c68 <__malloc_lock>
 80019e0:	4a1e      	ldr	r2, [pc, #120]	; (8001a5c <_free_r+0x94>)
 80019e2:	6813      	ldr	r3, [r2, #0]
 80019e4:	4610      	mov	r0, r2
 80019e6:	b933      	cbnz	r3, 80019f6 <_free_r+0x2e>
 80019e8:	6063      	str	r3, [r4, #4]
 80019ea:	6014      	str	r4, [r2, #0]
 80019ec:	4628      	mov	r0, r5
 80019ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019f2:	f000 b93f 	b.w	8001c74 <__malloc_unlock>
 80019f6:	42a3      	cmp	r3, r4
 80019f8:	d90a      	bls.n	8001a10 <_free_r+0x48>
 80019fa:	6821      	ldr	r1, [r4, #0]
 80019fc:	1862      	adds	r2, r4, r1
 80019fe:	4293      	cmp	r3, r2
 8001a00:	bf01      	itttt	eq
 8001a02:	681a      	ldreq	r2, [r3, #0]
 8001a04:	685b      	ldreq	r3, [r3, #4]
 8001a06:	1852      	addeq	r2, r2, r1
 8001a08:	6022      	streq	r2, [r4, #0]
 8001a0a:	6063      	str	r3, [r4, #4]
 8001a0c:	6004      	str	r4, [r0, #0]
 8001a0e:	e7ed      	b.n	80019ec <_free_r+0x24>
 8001a10:	461a      	mov	r2, r3
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	b10b      	cbz	r3, 8001a1a <_free_r+0x52>
 8001a16:	42a3      	cmp	r3, r4
 8001a18:	d9fa      	bls.n	8001a10 <_free_r+0x48>
 8001a1a:	6811      	ldr	r1, [r2, #0]
 8001a1c:	1850      	adds	r0, r2, r1
 8001a1e:	42a0      	cmp	r0, r4
 8001a20:	d10b      	bne.n	8001a3a <_free_r+0x72>
 8001a22:	6820      	ldr	r0, [r4, #0]
 8001a24:	4401      	add	r1, r0
 8001a26:	1850      	adds	r0, r2, r1
 8001a28:	4283      	cmp	r3, r0
 8001a2a:	6011      	str	r1, [r2, #0]
 8001a2c:	d1de      	bne.n	80019ec <_free_r+0x24>
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4401      	add	r1, r0
 8001a34:	6011      	str	r1, [r2, #0]
 8001a36:	6053      	str	r3, [r2, #4]
 8001a38:	e7d8      	b.n	80019ec <_free_r+0x24>
 8001a3a:	d902      	bls.n	8001a42 <_free_r+0x7a>
 8001a3c:	230c      	movs	r3, #12
 8001a3e:	602b      	str	r3, [r5, #0]
 8001a40:	e7d4      	b.n	80019ec <_free_r+0x24>
 8001a42:	6820      	ldr	r0, [r4, #0]
 8001a44:	1821      	adds	r1, r4, r0
 8001a46:	428b      	cmp	r3, r1
 8001a48:	bf01      	itttt	eq
 8001a4a:	6819      	ldreq	r1, [r3, #0]
 8001a4c:	685b      	ldreq	r3, [r3, #4]
 8001a4e:	1809      	addeq	r1, r1, r0
 8001a50:	6021      	streq	r1, [r4, #0]
 8001a52:	6063      	str	r3, [r4, #4]
 8001a54:	6054      	str	r4, [r2, #4]
 8001a56:	e7c9      	b.n	80019ec <_free_r+0x24>
 8001a58:	bd38      	pop	{r3, r4, r5, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000090 	.word	0x20000090

08001a60 <_malloc_r>:
 8001a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a62:	1ccd      	adds	r5, r1, #3
 8001a64:	f025 0503 	bic.w	r5, r5, #3
 8001a68:	3508      	adds	r5, #8
 8001a6a:	2d0c      	cmp	r5, #12
 8001a6c:	bf38      	it	cc
 8001a6e:	250c      	movcc	r5, #12
 8001a70:	2d00      	cmp	r5, #0
 8001a72:	4606      	mov	r6, r0
 8001a74:	db01      	blt.n	8001a7a <_malloc_r+0x1a>
 8001a76:	42a9      	cmp	r1, r5
 8001a78:	d903      	bls.n	8001a82 <_malloc_r+0x22>
 8001a7a:	230c      	movs	r3, #12
 8001a7c:	6033      	str	r3, [r6, #0]
 8001a7e:	2000      	movs	r0, #0
 8001a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a82:	f000 f8f1 	bl	8001c68 <__malloc_lock>
 8001a86:	4921      	ldr	r1, [pc, #132]	; (8001b0c <_malloc_r+0xac>)
 8001a88:	680a      	ldr	r2, [r1, #0]
 8001a8a:	4614      	mov	r4, r2
 8001a8c:	b99c      	cbnz	r4, 8001ab6 <_malloc_r+0x56>
 8001a8e:	4f20      	ldr	r7, [pc, #128]	; (8001b10 <_malloc_r+0xb0>)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	b923      	cbnz	r3, 8001a9e <_malloc_r+0x3e>
 8001a94:	4621      	mov	r1, r4
 8001a96:	4630      	mov	r0, r6
 8001a98:	f000 f83c 	bl	8001b14 <_sbrk_r>
 8001a9c:	6038      	str	r0, [r7, #0]
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	4630      	mov	r0, r6
 8001aa2:	f000 f837 	bl	8001b14 <_sbrk_r>
 8001aa6:	1c43      	adds	r3, r0, #1
 8001aa8:	d123      	bne.n	8001af2 <_malloc_r+0x92>
 8001aaa:	230c      	movs	r3, #12
 8001aac:	4630      	mov	r0, r6
 8001aae:	6033      	str	r3, [r6, #0]
 8001ab0:	f000 f8e0 	bl	8001c74 <__malloc_unlock>
 8001ab4:	e7e3      	b.n	8001a7e <_malloc_r+0x1e>
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	1b5b      	subs	r3, r3, r5
 8001aba:	d417      	bmi.n	8001aec <_malloc_r+0x8c>
 8001abc:	2b0b      	cmp	r3, #11
 8001abe:	d903      	bls.n	8001ac8 <_malloc_r+0x68>
 8001ac0:	6023      	str	r3, [r4, #0]
 8001ac2:	441c      	add	r4, r3
 8001ac4:	6025      	str	r5, [r4, #0]
 8001ac6:	e004      	b.n	8001ad2 <_malloc_r+0x72>
 8001ac8:	6863      	ldr	r3, [r4, #4]
 8001aca:	42a2      	cmp	r2, r4
 8001acc:	bf0c      	ite	eq
 8001ace:	600b      	streq	r3, [r1, #0]
 8001ad0:	6053      	strne	r3, [r2, #4]
 8001ad2:	4630      	mov	r0, r6
 8001ad4:	f000 f8ce 	bl	8001c74 <__malloc_unlock>
 8001ad8:	f104 000b 	add.w	r0, r4, #11
 8001adc:	1d23      	adds	r3, r4, #4
 8001ade:	f020 0007 	bic.w	r0, r0, #7
 8001ae2:	1ac2      	subs	r2, r0, r3
 8001ae4:	d0cc      	beq.n	8001a80 <_malloc_r+0x20>
 8001ae6:	1a1b      	subs	r3, r3, r0
 8001ae8:	50a3      	str	r3, [r4, r2]
 8001aea:	e7c9      	b.n	8001a80 <_malloc_r+0x20>
 8001aec:	4622      	mov	r2, r4
 8001aee:	6864      	ldr	r4, [r4, #4]
 8001af0:	e7cc      	b.n	8001a8c <_malloc_r+0x2c>
 8001af2:	1cc4      	adds	r4, r0, #3
 8001af4:	f024 0403 	bic.w	r4, r4, #3
 8001af8:	42a0      	cmp	r0, r4
 8001afa:	d0e3      	beq.n	8001ac4 <_malloc_r+0x64>
 8001afc:	1a21      	subs	r1, r4, r0
 8001afe:	4630      	mov	r0, r6
 8001b00:	f000 f808 	bl	8001b14 <_sbrk_r>
 8001b04:	3001      	adds	r0, #1
 8001b06:	d1dd      	bne.n	8001ac4 <_malloc_r+0x64>
 8001b08:	e7cf      	b.n	8001aaa <_malloc_r+0x4a>
 8001b0a:	bf00      	nop
 8001b0c:	20000090 	.word	0x20000090
 8001b10:	20000094 	.word	0x20000094

08001b14 <_sbrk_r>:
 8001b14:	b538      	push	{r3, r4, r5, lr}
 8001b16:	2300      	movs	r3, #0
 8001b18:	4d05      	ldr	r5, [pc, #20]	; (8001b30 <_sbrk_r+0x1c>)
 8001b1a:	4604      	mov	r4, r0
 8001b1c:	4608      	mov	r0, r1
 8001b1e:	602b      	str	r3, [r5, #0]
 8001b20:	f7fe fc62 	bl	80003e8 <_sbrk>
 8001b24:	1c43      	adds	r3, r0, #1
 8001b26:	d102      	bne.n	8001b2e <_sbrk_r+0x1a>
 8001b28:	682b      	ldr	r3, [r5, #0]
 8001b2a:	b103      	cbz	r3, 8001b2e <_sbrk_r+0x1a>
 8001b2c:	6023      	str	r3, [r4, #0]
 8001b2e:	bd38      	pop	{r3, r4, r5, pc}
 8001b30:	200000a8 	.word	0x200000a8

08001b34 <__sread>:
 8001b34:	b510      	push	{r4, lr}
 8001b36:	460c      	mov	r4, r1
 8001b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b3c:	f000 f8a0 	bl	8001c80 <_read_r>
 8001b40:	2800      	cmp	r0, #0
 8001b42:	bfab      	itete	ge
 8001b44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001b46:	89a3      	ldrhlt	r3, [r4, #12]
 8001b48:	181b      	addge	r3, r3, r0
 8001b4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001b4e:	bfac      	ite	ge
 8001b50:	6563      	strge	r3, [r4, #84]	; 0x54
 8001b52:	81a3      	strhlt	r3, [r4, #12]
 8001b54:	bd10      	pop	{r4, pc}

08001b56 <__swrite>:
 8001b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b5a:	461f      	mov	r7, r3
 8001b5c:	898b      	ldrh	r3, [r1, #12]
 8001b5e:	4605      	mov	r5, r0
 8001b60:	05db      	lsls	r3, r3, #23
 8001b62:	460c      	mov	r4, r1
 8001b64:	4616      	mov	r6, r2
 8001b66:	d505      	bpl.n	8001b74 <__swrite+0x1e>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b70:	f000 f868 	bl	8001c44 <_lseek_r>
 8001b74:	89a3      	ldrh	r3, [r4, #12]
 8001b76:	4632      	mov	r2, r6
 8001b78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b7c:	81a3      	strh	r3, [r4, #12]
 8001b7e:	4628      	mov	r0, r5
 8001b80:	463b      	mov	r3, r7
 8001b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b8a:	f000 b817 	b.w	8001bbc <_write_r>

08001b8e <__sseek>:
 8001b8e:	b510      	push	{r4, lr}
 8001b90:	460c      	mov	r4, r1
 8001b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b96:	f000 f855 	bl	8001c44 <_lseek_r>
 8001b9a:	1c43      	adds	r3, r0, #1
 8001b9c:	89a3      	ldrh	r3, [r4, #12]
 8001b9e:	bf15      	itete	ne
 8001ba0:	6560      	strne	r0, [r4, #84]	; 0x54
 8001ba2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001ba6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001baa:	81a3      	strheq	r3, [r4, #12]
 8001bac:	bf18      	it	ne
 8001bae:	81a3      	strhne	r3, [r4, #12]
 8001bb0:	bd10      	pop	{r4, pc}

08001bb2 <__sclose>:
 8001bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bb6:	f000 b813 	b.w	8001be0 <_close_r>
	...

08001bbc <_write_r>:
 8001bbc:	b538      	push	{r3, r4, r5, lr}
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	4608      	mov	r0, r1
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	4d05      	ldr	r5, [pc, #20]	; (8001bdc <_write_r+0x20>)
 8001bc8:	602a      	str	r2, [r5, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	f7fe fbc0 	bl	8000350 <_write>
 8001bd0:	1c43      	adds	r3, r0, #1
 8001bd2:	d102      	bne.n	8001bda <_write_r+0x1e>
 8001bd4:	682b      	ldr	r3, [r5, #0]
 8001bd6:	b103      	cbz	r3, 8001bda <_write_r+0x1e>
 8001bd8:	6023      	str	r3, [r4, #0]
 8001bda:	bd38      	pop	{r3, r4, r5, pc}
 8001bdc:	200000a8 	.word	0x200000a8

08001be0 <_close_r>:
 8001be0:	b538      	push	{r3, r4, r5, lr}
 8001be2:	2300      	movs	r3, #0
 8001be4:	4d05      	ldr	r5, [pc, #20]	; (8001bfc <_close_r+0x1c>)
 8001be6:	4604      	mov	r4, r0
 8001be8:	4608      	mov	r0, r1
 8001bea:	602b      	str	r3, [r5, #0]
 8001bec:	f7fe fbcc 	bl	8000388 <_close>
 8001bf0:	1c43      	adds	r3, r0, #1
 8001bf2:	d102      	bne.n	8001bfa <_close_r+0x1a>
 8001bf4:	682b      	ldr	r3, [r5, #0]
 8001bf6:	b103      	cbz	r3, 8001bfa <_close_r+0x1a>
 8001bf8:	6023      	str	r3, [r4, #0]
 8001bfa:	bd38      	pop	{r3, r4, r5, pc}
 8001bfc:	200000a8 	.word	0x200000a8

08001c00 <_fstat_r>:
 8001c00:	b538      	push	{r3, r4, r5, lr}
 8001c02:	2300      	movs	r3, #0
 8001c04:	4d06      	ldr	r5, [pc, #24]	; (8001c20 <_fstat_r+0x20>)
 8001c06:	4604      	mov	r4, r0
 8001c08:	4608      	mov	r0, r1
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	602b      	str	r3, [r5, #0]
 8001c0e:	f7fe fbc6 	bl	800039e <_fstat>
 8001c12:	1c43      	adds	r3, r0, #1
 8001c14:	d102      	bne.n	8001c1c <_fstat_r+0x1c>
 8001c16:	682b      	ldr	r3, [r5, #0]
 8001c18:	b103      	cbz	r3, 8001c1c <_fstat_r+0x1c>
 8001c1a:	6023      	str	r3, [r4, #0]
 8001c1c:	bd38      	pop	{r3, r4, r5, pc}
 8001c1e:	bf00      	nop
 8001c20:	200000a8 	.word	0x200000a8

08001c24 <_isatty_r>:
 8001c24:	b538      	push	{r3, r4, r5, lr}
 8001c26:	2300      	movs	r3, #0
 8001c28:	4d05      	ldr	r5, [pc, #20]	; (8001c40 <_isatty_r+0x1c>)
 8001c2a:	4604      	mov	r4, r0
 8001c2c:	4608      	mov	r0, r1
 8001c2e:	602b      	str	r3, [r5, #0]
 8001c30:	f7fe fbc4 	bl	80003bc <_isatty>
 8001c34:	1c43      	adds	r3, r0, #1
 8001c36:	d102      	bne.n	8001c3e <_isatty_r+0x1a>
 8001c38:	682b      	ldr	r3, [r5, #0]
 8001c3a:	b103      	cbz	r3, 8001c3e <_isatty_r+0x1a>
 8001c3c:	6023      	str	r3, [r4, #0]
 8001c3e:	bd38      	pop	{r3, r4, r5, pc}
 8001c40:	200000a8 	.word	0x200000a8

08001c44 <_lseek_r>:
 8001c44:	b538      	push	{r3, r4, r5, lr}
 8001c46:	4604      	mov	r4, r0
 8001c48:	4608      	mov	r0, r1
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	4d05      	ldr	r5, [pc, #20]	; (8001c64 <_lseek_r+0x20>)
 8001c50:	602a      	str	r2, [r5, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	f7fe fbbc 	bl	80003d0 <_lseek>
 8001c58:	1c43      	adds	r3, r0, #1
 8001c5a:	d102      	bne.n	8001c62 <_lseek_r+0x1e>
 8001c5c:	682b      	ldr	r3, [r5, #0]
 8001c5e:	b103      	cbz	r3, 8001c62 <_lseek_r+0x1e>
 8001c60:	6023      	str	r3, [r4, #0]
 8001c62:	bd38      	pop	{r3, r4, r5, pc}
 8001c64:	200000a8 	.word	0x200000a8

08001c68 <__malloc_lock>:
 8001c68:	4801      	ldr	r0, [pc, #4]	; (8001c70 <__malloc_lock+0x8>)
 8001c6a:	f7ff be47 	b.w	80018fc <__retarget_lock_acquire_recursive>
 8001c6e:	bf00      	nop
 8001c70:	200000a0 	.word	0x200000a0

08001c74 <__malloc_unlock>:
 8001c74:	4801      	ldr	r0, [pc, #4]	; (8001c7c <__malloc_unlock+0x8>)
 8001c76:	f7ff be42 	b.w	80018fe <__retarget_lock_release_recursive>
 8001c7a:	bf00      	nop
 8001c7c:	200000a0 	.word	0x200000a0

08001c80 <_read_r>:
 8001c80:	b538      	push	{r3, r4, r5, lr}
 8001c82:	4604      	mov	r4, r0
 8001c84:	4608      	mov	r0, r1
 8001c86:	4611      	mov	r1, r2
 8001c88:	2200      	movs	r2, #0
 8001c8a:	4d05      	ldr	r5, [pc, #20]	; (8001ca0 <_read_r+0x20>)
 8001c8c:	602a      	str	r2, [r5, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	f7fe fb41 	bl	8000316 <_read>
 8001c94:	1c43      	adds	r3, r0, #1
 8001c96:	d102      	bne.n	8001c9e <_read_r+0x1e>
 8001c98:	682b      	ldr	r3, [r5, #0]
 8001c9a:	b103      	cbz	r3, 8001c9e <_read_r+0x1e>
 8001c9c:	6023      	str	r3, [r4, #0]
 8001c9e:	bd38      	pop	{r3, r4, r5, pc}
 8001ca0:	200000a8 	.word	0x200000a8

08001ca4 <_init>:
 8001ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca6:	bf00      	nop
 8001ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001caa:	bc08      	pop	{r3}
 8001cac:	469e      	mov	lr, r3
 8001cae:	4770      	bx	lr

08001cb0 <_fini>:
 8001cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb2:	bf00      	nop
 8001cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cb6:	bc08      	pop	{r3}
 8001cb8:	469e      	mov	lr, r3
 8001cba:	4770      	bx	lr
